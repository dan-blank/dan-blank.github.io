<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman – Blog</title>
    <link href="https://tony-zorman.com/atom.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom.xml</id>
    <author>
        <name>Tony Zorman</name>
        <email>tonyzorman@mailbox.org</email>
    </author>
    <updated>2022-12-22T00:00:00Z</updated>
    <entry>
    <title>Announcing: vc-use-package</title>
    <link href="https://tony-zorman.com/posts/2022-12-22-vc-use-package.html" />
    <id>https://tony-zorman.com/posts/2022-12-22-vc-use-package.html</id>
    <published>2022-12-22T00:00:00Z</published>
    <updated>2022-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-12-22
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>
      
    </section>
    <section>
        <p>I’d like to announce a small package I’ve written: <a href="https://github.com/slotThe/vc-use-package">vc-use-package</a>. It
is a first attempt at integrating the new (as of Emacs 29)
<code>package-vc.el</code> with the now built-in use-package. I’ve already talked
about how these two interact in my <a href="https://tony-zorman.com/posts/2022-11-30-package-vc-install.html">last post</a>—you can
see this package as automating things juuuust a little more.</p>
<!--more-->
<h1 id="motivation">Motivation</h1>
<p>For the last post, someone gave me some <a href="https://old.reddit.com/r/emacs/comments/z9i4ce/exploring_packagevcinstall_as_an_alternative_to/iygzeum/">feedback</a>:
couldn’t we go a little further? In particular, they wanted a new <code>:vc</code>
keyword for use-package, much like <a href="https://github.com/quelpa/quelpa">quelpa</a> has done with
<a href="https://github.com/quelpa/quelpa-use-package">quelpa-use-package</a>. I already gave them a small working example in a
follow-up comment, but figured this might actually interest enough
people so that turning it into a proper package could be worth it; and
here we are!</p>
<p>The basic premise is really this simple—we create a handler for a new
<code>:vc</code> use-package keyword. It can be used like so:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> math-delimiters</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  :vc (:fetcher github :repo oantolin/math-delimiters))</span></code></pre></div>
<p>One can specify most arguments that <code>package-vc-install</code> also accepts; for example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> math-delimiters</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  :vc (:fetcher <span class="st">&quot;github&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>       :repo <span class="st">&quot;oantolin/math-delimiters&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>       :rev <span class="st">&quot;master&quot;</span>         <span class="co">; also accepts the special `:last-release'</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>       :backend Git))</span></code></pre></div>
<p>Much like quelpa-use-package, there is some care needed concerning the
interaction between this package and the <code>use-package-always-ensure</code>
variable, but this should mostly be taken care of automatically. For
more information (and manual controls), see the
<a href="https://github.com/slotThe/vc-use-package#in-combination-with-use-package-always-ensure">README</a>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>As I’ve said in the corresponding Reddit post, now that both
<code>package-vc.el</code> and use-package are built-in, someone should really add
this to Emacs proper. Alas, since I copied the idea and most of the
initial implementation from quelpa-use-package—and thus copyright
assignment is a bit iffy—it will not be me. Still, implementing this
from scratch does not sound so hard. If anyone feels inspired to do
exactly this, I’d be delighted!</p>
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Exploring package-vc-install</title>
    <link href="https://tony-zorman.com/posts/2022-11-30-package-vc-install.html" />
    <id>https://tony-zorman.com/posts/2022-11-30-package-vc-install.html</id>
    <published>2022-11-30T00:00:00Z</published>
    <updated>2022-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-11-30
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>
      
    </section>
    <section>
        
<p>The Emacs 29 release branch was just cut—and it’s chock full of new
features! In this post, I want to talk about the new
<code>package-vc-install</code> function, which allows one to install packages
directly from their respective upstream source; for example, GitHub. It
can be seen as a built-in alternative to things like quelpa or
straight.el.</p>
<!--more-->
<h1 id="the-story-so-far">The story so far</h1>
<p>I’ve been using <a href="https://github.com/quelpa/quelpa">quelpa</a> and <a href="https://github.com/quelpa/quelpa-use-package">quelpa-use-package</a> to install packages
that are not on any popular archive straight from source. Especially
the latter package resulted in an almost seemless integration with the
rest of my configuration; for example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> math-delimiters</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  :quelpa (math-delimiters :fetcher github :repo <span class="st">&quot;oantolin/math-delimiters&quot;</span>))</span></code></pre></div>
<p><a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=5fa2f116799b8a7c17ff6eedd6e1b1af077c116b">Recently</a>, Emacs added built-in capabilities for
installing a package directly from its remote repository. Eager to
shave yet another external package from my otherwise ever growing list,
I took <code>package-vc.el</code> out for a spin: turns out, it almost perfectly
covers the use-case for which I—and perhaps a few other people—used
quelpa up until now!</p>
<p>The most user-facing of these new functions is <code>package-vc-install</code>,
with signature</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(package-vc-install PACKAGE &amp;optional NAME REV BACKEND)</span></code></pre></div>
<p>In the simplest case, it takes a URL pointing to some online source as
its argument and installs the respective package from there, guessing
the name from the URL. In case that doesn’t work—or one wants more
control, like requiring a specific revision—there are some other
optional arguments available, see the function’s documentation.</p>
<h1 id="customising-package-vc-install">Customising <code>package-vc-install</code></h1>
<p>When a package is already installed, <code>package-vc-install</code> will ask the
user to interactively confirm whether they really want to overwrite the
existing directory. Naturally, this is not a good experience when
trying to use this in a non-interactive fashion.</p>
<p>There are a few ways one could go about fixing this. One of these is
even documented in the manual: customise <code>package-vc-selected-packages</code>
and then call <code>package-vc-install-selected-packages</code>, which works much
like <code>package-install-selected-packages</code>. However, this feels
unergonomic to me—at least considering that I want to use
<code>package-vc-install</code> as a (hopefully) drop-in replacement for
use-package’s <code>quelpa</code> keyword. Plus, I’d rather have the information
that package X is not installed from *ELPA local to the use-package
declaration of X itself.</p>
<p>So, let’s take the easy way out and write a small wrapper:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(cl-defun slot/vc-install (&amp;key (fetcher <span class="st">&quot;github&quot;</span>) repo name rev backend)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Install a package from a remote if it's not already installed.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="st">This is a thin wrapper around `package-vc-install' in order to</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="st">make non-interactive usage more ergonomic.  Takes the following</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="st">named arguments:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="st">- FETCHER the remote where to get the package (e.g., </span><span class="sc">\&quot;</span><span class="st">gitlab</span><span class="sc">\&quot;</span><span class="st">).</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="st">  If omitted, this defaults to </span><span class="sc">\&quot;</span><span class="st">github</span><span class="sc">\&quot;</span><span class="st">.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="st">- REPO should be the name of the repository (e.g.,</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="st">  </span><span class="sc">\&quot;</span><span class="st">slotThe/arXiv-citation</span><span class="sc">\&quot;</span><span class="st">.</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="st">- NAME, REV, and BACKEND are as in `package-vc-install' (which</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="st">  see).&quot;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((url (<span class="kw">format</span> <span class="st">&quot;https://www.%s.com/%s&quot;</span> fetcher repo))</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>         (iname (<span class="kw">when</span> name (<span class="kw">intern</span> name)))</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>         (pac-name (<span class="kw">or</span> iname (<span class="kw">intern</span> (file-name-base repo)))))</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">unless</span> (package-installed-p pac-name)</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>      (package-vc-install url iname rev backend))))</span></code></pre></div>
<p>This function can now be used under the <code>init</code> keyword of the
use-package macro, almost without changing the shape of the declaration
from above:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; Before</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> math-delimiters</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  :quelpa (math-delimiters :fetcher github :repo <span class="st">&quot;oantolin/math-delimiters&quot;</span>))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">;; After</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>(<span class="kw">use-package</span> math-delimiters</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  :init (slot/vc-install :fetcher <span class="st">&quot;github&quot;</span> :repo <span class="st">&quot;oantolin/math-delimiters&quot;</span>)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">;; OR (slot/vc-install :repo &quot;oantolin/math-delimiters&quot;)</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  )</span></code></pre></div>
<p>In case you think I cherry picked the example, <a href="https://gitlab.com/slotThe/dotfiles/-/commit/6d55ac184af125a117215a1bb812ad75c5b0ab03">here</a>
is the full commit that exchanges quelpa for <code>slot/vc-install</code>.</p>
<h1 id="thats-all-folks">That’s all folks!</h1>
<p>Admittedly, my use of quelpa was rather primitive. I can imagine users
more heavily invested in, for example, the <code>straight.el</code> ecosystem
probably want a bit more out of their package manager than <code>package.el</code>
can give them right now, even with the added convenience of
<code>package-vc.el</code>. However, for me—and probably at least a few people out
there—this is quite enough. After all, for anything more there’s always
<a href="https://nixos.org/">nix</a> :)</p>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Adjusting preview.el for vertical monitors</title>
    <link href="https://tony-zorman.com/posts/2022-11-05-vertical-previews.html" />
    <id>https://tony-zorman.com/posts/2022-11-05-vertical-previews.html</id>
    <published>2022-11-05T00:00:00Z</published>
    <updated>2022-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-11-05
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>
      
    </section>
    <section>
        <p>Here’s a fun one: when previewing LaTeX fragments via AUCTeX’s
<code>preview.el</code> library (whether it be in a .tex buffer, or—via
<a href="https://github.com/karthink/org-auctex">org-auctex</a>—in Org) things get <em>really</em> messed up when one or more
monitors are set up in portrait mode.</p>
<!--more-->
<p>When you have two monitors oriented vertically, previews might end up
looking something like this:</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/two-vertical.png">
</p>
<p>With the perhaps more common setup of one vertical and one horizontal
monitor, you could instead get the charming</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/one-vertical.png">
</p>
<p>Imagine a whole page of this—things get pretty funky. Being a boring
person, I would rather prefer the much more ordinary looking</p>
<p style="text-align:center;">
<img class="pure-img" src="../images/vertical-preview/normal.png">
</p>
<p>Thankfully, this isn’t so complicated. Looking into <code>preview.el</code>, we
get the geometry of the frame from <code>preview-get-geometry</code>. At least,
this is what <code>preview-generate-preview</code> calls before delegating the
heavy lifting to some internal functions. After staring at the former
function for a while, one can single out <code>preview-get-dpi</code> as the main
culprit. It seems to calculate the “resolution” of the preview:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">defun</span><span class="fu"> preview-get-dpi </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let*</span> ((monitor-attrs (frame-monitor-attributes))</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>           (mm-dims (<span class="kw">cdr</span> (<span class="kw">assoc</span> 'mm-size monitor-attrs)))</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>           (mm-width (<span class="kw">nth</span> <span class="dv">0</span> mm-dims))</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>           (mm-height (<span class="kw">nth</span> <span class="dv">1</span> mm-dims))</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>           (pixel-dims (cl-cdddr (<span class="kw">assoc</span> 'geometry monitor-attrs)))</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>           (pixel-width (<span class="kw">nth</span> <span class="dv">0</span> pixel-dims))</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>           (pixel-height (<span class="kw">nth</span> <span class="dv">1</span> pixel-dims)))</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">cons</span> (<span class="op">/</span> (<span class="op">*</span> <span class="fl">25.4</span> pixel-width) mm-width)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>            (<span class="op">/</span> (<span class="op">*</span> <span class="fl">25.4</span> pixel-height) mm-height))))</span></code></pre></div>
<p>Monitor details are returned by the <code>frame-monitor-attributes</code> function;
its output for a horizontal monitor is</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  '((name . <span class="st">&quot;DP1&quot;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    (geometry <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1920</span> <span class="dv">1080</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    (workarea <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1920</span> <span class="dv">1080</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    (mm-size <span class="dv">530</span> <span class="dv">300</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    (frames &lt;&lt;omitted&gt;&gt;)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    (source . <span class="st">&quot;XRandR 1.5&quot;</span>))</span></code></pre></div>
<p>While the same monitor in “vertical-mode” returns</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>  '((name . <span class="st">&quot;DP1&quot;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    (geometry <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1080</span> <span class="dv">1920</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    (workarea <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1080</span> <span class="dv">1920</span>)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    (mm-size <span class="dv">530</span> <span class="dv">300</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    (frames &lt;&lt;omitted&gt;&gt;)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    (source . <span class="st">&quot;XRandR 1.5&quot;</span>))</span></code></pre></div>
<p>Crucially, the physical width and height of the monitor don’t change,
but the <em>geometry</em>—the pixel width and height—does; you can <code>C-h f display-monitor-attributes-list RET</code> for more information. This means
that in portrait mode, we actually compare the pixel <em>width</em> of the
monitor with its physical <em>height</em>, as well as its pixel height with its
width. Naturally, and depending on the specific setup, this produces
too narrow or too wide previews.</p>
<p>The solution is to only compare the comparable values. Indeed,
overriding the built-in <code>preview-get-dpi</code> function with</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">defun</span><span class="fu"> preview-get-dpi </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    (-let (((&amp;alist 'mm-size (mw mh)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>                    'geometry (_ _ pw ph))</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>            (frame-monitor-attributes)))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">cons</span> (<span class="op">/</span> (<span class="op">*</span> <span class="fl">25.4</span> (<span class="kw">max</span> pw ph)) (<span class="kw">max</span> mw mh))</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            (<span class="op">/</span> (<span class="op">*</span> <span class="fl">25.4</span> (<span class="kw">min</span> pw ph)) (<span class="kw">min</span> mw mh)))))</span></code></pre></div>
<p>produces the correct behaviour! This implicit assumption—that monitors
are generally wider than they are tall—of <code>preview-get-dpi</code> should
probably be fixed; I will report it as an Emacs bug.</p>
<p>As an aside, this is an excellent opportunity to see the ergonomic
benefits of the <a href="https://github.com/magnars/dash.el">dash.el</a> library. Compare the readability of the
“fixed” implementation using <code>-let</code> to the original one above. I
certainly know which of the two I’d rather write!</p>
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>A Potpourri of Emacs Tweaks</title>
    <link href="https://tony-zorman.com/posts/2022-10-22-emacs-potpourri.html" />
    <id>https://tony-zorman.com/posts/2022-10-22-emacs-potpourri.html</id>
    <published>2022-10-22T00:00:00Z</published>
    <updated>2022-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-10-22
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>
      
    </section>
    <section>
        
<p>Emacs is the “extensible text editor”, and it wouldn’t be fun if one
didn’t at least try to take advantage of that, right? Having just
written a <a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs/.config/emacs">README</a> for my Emacs configuration, I
thought it might be nice to somewhat expand on certain ideas and give a
little context to some snippets that have accumulated over time.</p>
<p>While there is a post about <a href="https://tony-zorman.com/posts/query-replace/2022-08-06-query-replace-many.html">my version</a> of the
<code>query-replace</code> function, most other tidbits have only seen the light of
day in places like the “Weekly Tips, Tricks, &amp;c.” thread on Reddit. In
the spirit of hosting my content somewhere that I actually control,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
I chose to showcase these again here, hoping that other people may also
find some of this stuff useful.</p>
<!--more-->
<h1 id="frame-inhibit-implied-resize"><code>frame-inhibit-implied-resize</code></h1>
<p>This variable is interesting for all the people who, for one reason or
another, care about the startup time of their Emacs session. Even more
if one uses a tiling window manager, as then Emacs doesn’t get a say in
how big its frame will be anyway. An excerpt from the documentation:</p>
<blockquote>
<p>Whether frames should be resized implicitly.</p>
<p>If this option is nil, setting font, menu bar, tool bar, tab bar,
internal borders, fringes or scroll bars of a specific frame may
resize the frame in order to preserve the number of columns or lines
it displays. If this option is t, no such resizing is done.</p>
</blockquote>
<p>I always wondered why startup time skyrocketed whenever I changed the
default font to something else—surely opening a font and using it can’t
be that expensive! What I didn’t realise was that what I set was
slightly larger than Emacs’s default font, which I reckon was some kind
of monospace fallback on my system. Setting
<code>frame-inhibit-implied-resize</code> to <code>t</code> will thusly prevent Emacs from
trying to—futilely, since I use <a href="https://xmonad.org">XMonad</a>—resize its frame in order to
“preserve the number of columns or lines it displays”. The upshot is
that this cuts my startup time from just over 1 second to about 0.8
seconds. This may not seem like much, but it’s literally <a href="https://gitlab.com/slotThe/dotfiles/-/blob/460060b7b5e164e6b892397e264b0da470ed74c9/emacs/.config/emacs/early-init.el#L51">setting a
single variable</a> in my <code>early-init.el</code>—pretty good
value for money.</p>
<h1 id="pixel-scroll-precision-mode"><code>pixel-scroll-precision-mode</code></h1>
<p>This is pretty old news by now, but I wanted to take the opportunity to
again praise <code>pixel-scroll-precision-mode</code>. My day job is being a <a href="./phd-workflow/2022-05-01-my-phd-workflow.html">PhD
student in maths</a>, which means that I write a lot of
LaTeX and also use Org extensively for taking notes. While ordinary
LaTeX entry in Org works quite well, commutative diagrams are a pain
more often than not. In fact, It’s much easier to draw them with a tool
like <a href="https://q.uiver.app/">quiver</a>, make a screenshot, and then include the resulting picture
in the file. However, now we have the problem that Emacs treats
pictures as very large single characters—the result is a scrolling
experience that’s very far from optimal. This is <em>exactly</em> where
<code>pixel-scroll-precision-mode</code> comes in and saves the day, but see the
difference for yourself:</p>
<video width="100%" controls>
<source src="../images/emacs-potpourri/pixel-scroll-precision-mode.mp4" type="video/mp4">
</video>
<h1 id="quickly-insert-images-in-org-roam">Quickly Insert images in <code>org-roam</code></h1>
<p>Speaking of inserting images into Org; how does one do that, exactly?
Doing everything by hand seems like a slog: select an arbitrary
rectangle on the screen, take a screenshot of it, move the resulting
picture into the correct directory, give it an appropriate name, and
insert a link to it into the current buffer. This sounds like a lot of
busywork for something that I ideally don’t want to think about at all;
thankfully, most of this can be nicely automated.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/org-roam-insert-image </span>()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Select and insert an image at point.&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  (interactive)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((file-name (<span class="kw">format</span> <span class="st">&quot;%s-%s.png&quot;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                            (file-name-sans-extension (buffer-name))</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                            (cl-random (<span class="kw">expt</span> <span class="dv">2</span> <span class="dv">31</span>))))</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>         (path (<span class="kw">format</span> <span class="st">&quot;%s/%s/%s&quot;</span> org-roam-directory <span class="st">&quot;images&quot;</span> file-name)))</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; The mouse movement via xdotool is needed because otherwise, if</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; unclutter is active, the pointer will remain hidden.  Uff.</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    (call-process <span class="st">&quot;xdotool&quot;</span> <span class="kw">nil</span> <span class="dv">0</span> <span class="kw">nil</span> <span class="st">&quot;mousemove_relative&quot;</span> <span class="st">&quot;--&quot;</span> <span class="st">&quot;-1&quot;</span> <span class="st">&quot;0&quot;</span>)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">let</span> ((scrot-exit (call-process <span class="st">&quot;scrot&quot;</span> <span class="kw">nil</span> <span class="kw">nil</span> <span class="kw">nil</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>                                    <span class="st">&quot;-z&quot;</span> <span class="st">&quot;-f&quot;</span> <span class="st">&quot;-s&quot;</span> <span class="st">&quot;--file&quot;</span> path)))</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>      (<span class="kw">when</span> (<span class="op">=</span> scrot-exit <span class="dv">0</span>)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        (insert (<span class="kw">format</span> <span class="st">&quot;[[../images/%s]]&quot;</span> file-name))))))</span></code></pre></div>
<p>All it needs is <code>xdotool</code> for moving the mouse (though, if you don’t use
<code>unclutter</code> then this may well be deleted) and <code>scrot</code> for actually
taking the screenshot. Pretty convenient. If <code>scrot</code> is too low-tech
for you, then the above snippet probably also works with <code>flameshot</code> or
a similar tool.</p>
<h1 id="latex-for-the-lazy-mathematician">LaTeX for the lazy mathematician</h1>
<p>I am pretty impatient when it comes to LaTeX entry. So impatient that I
have created a few “now you’re really taking it too far”-type of
functions. To be honest, they kind of delight me.</p>
<p>First, the following is an override for the <code>self-insert-command</code>, which
enables faster entry of one-character math symbols:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/LaTeX-self-insert </span>(&amp;optional arg <span class="kw">char</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;`self-insert-command' for LaTeX mode.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="st">If the previous word is just a single character, surround it with</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">dollar signs.  If already in math mode, do nothing.  If the</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">character is a single `a', do nothing.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="st">If called with a single </span><span class="sc">\\</span><span class="st">[universal-argument], just call</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="st">`self-insert-command'.&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  (interactive <span class="st">&quot;P&quot;</span>)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  (pcase arg</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    ('(<span class="dv">4</span>) (self-insert-command <span class="dv">1</span>))</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    (_ (<span class="kw">let</span> ((ppoint (save-excursion (backward-word)       (point)))</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>             (ipoint (save-excursion (back-to-indentation) (point)))</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>             (word   (word-at-point)))</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>         (<span class="kw">unless</span> (<span class="kw">or</span> (length&gt; word <span class="dv">1</span>)   <span class="co">; longer than a single character</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">not</span> word)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>                     (<span class="op">=</span> ipoint ppoint)  <span class="co">; the first thing on a new line</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">equal</span> <span class="st">&quot;a&quot;</span> word)</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>                     (number-at-point)</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                     (texmathp))</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>           (-let (((<span class="kw">open</span> . <span class="kw">close</span>) math-delimiters-inline))</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>             (backward-char)</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>             (insert <span class="kw">open</span>)</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>             (forward-char <span class="dv">1</span>)</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>             (insert <span class="kw">close</span>)))</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>         (self-insert-command <span class="dv">1</span> <span class="kw">char</span>)))))</span></code></pre></div>
<p>Bound to <code>&lt;SPC&gt;</code> (and also things like <code>.</code> and <code>-</code>), it enables one to
write <code>"foo T&lt;SPC&gt;"</code> and have Emacs insert <code>"foo $T$ "</code> instead—very
convenient, and much faster even than having a snippet to insert dollars
based on some condition.</p>
<p>The laziness continues with me not wanting to write <code>\blank</code> so
often.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> I could also create an auto-expanding snippet for this, but
wouldn’t it be <em>much better</em> to insert it on a double tap of the space
bar instead? I think so!</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/LaTeX-space </span>(&amp;optional arg)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Insert a space; or not.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="st">In case the previous character was already a space, insert</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="sc">\\</span><span class="st">blank instead.&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  (interactive <span class="st">&quot;P&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">if</span> (<span class="kw">and</span> (<span class="op">=</span> ?\s (char-before)) (texmathp))</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      (insert <span class="st">&quot;</span><span class="sc">\\</span><span class="st">blank &quot;</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    (slot/LaTeX-self-insert arg ?\s)))</span></code></pre></div>
<p>Now, writing something like <code>"C(&lt;SPC&gt;&lt;SPC&gt;,&lt;SPC&gt;&lt;SPC&gt;)"</code> in math-mode
nicely inserts <code>"C( \blank , \blank )"</code>. Because the space bar is so
easy to press, this is again marginally faster than having to write
something like <code>"C(bln,bln)"</code>.</p>
<p>Together with auto-expanding snippets, this enables reasonably fast
LaTeX entry:</p>
<p><img class="pure-img" src="../images/emacs-potpourri/latex-entry.gif"></p>
<p>More examples can be found in the <a href="./phd-workflow/2022-05-01-my-phd-workflow.html#digital-notes">post</a> about
my research workflow.</p>
<h1 id="erc">ERC</h1>
<p>I recently switched from WeeChat to <a href="https://www.gnu.org/software/emacs/erc.html">ERC</a> for IRC. It’s
really great so far, but some things felt a bit lackluster out of the
box. As such, my <a href="https://gitlab.com/slotThe/dotfiles/-/blob/460060b7b5e164e6b892397e264b0da470ed74c9/emacs/.config/emacs/lisp/erc-config.el">ERC config</a> has already grown quite a
bit.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> The following are a few tweaks that improve my experience
greatly.</p>
<h2 id="mark-the-current-frame-as-urgent">Mark the current frame as urgent</h2>
<p>One feature I was dearly missing was the ability to set <a href="https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html">urgency
hints</a> in the case I get highlighted/pinged. This is
essentially the window telling your window manager or desktop
environment that it wants your attention. You can then execute an
action based on this urgency hint. Thankfully, Emacs is extensible, so
hacking this behaviour into ERC wasn’t actually all that complicated.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/mark-emacs-urgent </span>()</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Mark the current frame as urgent.&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((WM-HINTS <span class="st">&quot;WM_HINTS&quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>         (hints (seq--into-list</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>                 <span class="co">;; By default this returns a string/vector.</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>                 (x-window-property WM-HINTS <span class="kw">nil</span> WM-HINTS <span class="kw">nil</span> <span class="kw">nil</span> <span class="kw">t</span>))))</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; Urgency flag: (1L &lt;&lt; 8) == 256</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; Source (as always): https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    (setcar hints (<span class="kw">logior</span> (<span class="kw">car</span> hints) (lsh <span class="dv">1</span> <span class="dv">8</span>)))</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    (x-change-window-property WM-HINTS hints <span class="kw">nil</span> WM-HINTS <span class="dv">32</span>)))</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/beep-on-match </span>(match-type _nickuserhost message)</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Beep and mark the frame as urgent on highlight.&quot;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((visible-bell <span class="kw">nil</span>))</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    (slot/mark-emacs-urgent)</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    (erc-beep-on-match match-type _nickuserhost message)))</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>(add-hook 'erc-text-matched-hook #'slot/beep-on-match)</span></code></pre></div>
<p>And that’s really it! Now ERC correctly sends an urgency hint whenever
I get highlighted. Note that, <a href="https://old.reddit.com/r/emacs/comments/xjyuni/weekly_tips_tricks_c_thread/ipfjlw0/">as we found out</a>, if
you use a reparenting window manager (you probably do if you use a
desktop environment) you might have to give <code>x-change-window-property</code>
above an extra <code>t</code> argument.</p>
<h2 id="dont-highlight-quite-so-much">Don’t highlight quite so much</h2>
<p>Having configured quite a few regular expressions for when I get
highlighted, things can get quite overwhelming at times. For example,
when ERC starts up it prints <code>/users</code> in every channel buffer. Of
course, I’m a user in a channel that I’m in, so Emacs happily starts
beeping and throwing around urgency hints—not a good experience. This
also clutters the <code>ERC Keywords</code> buffer (which is built-in and akin to
WeeChat’s <code>highmon.pl</code>).</p>
<p>Thankfully, however, there is a straightforward hack around this: just
check the message for certain regular expression first and do nothing
when they are present.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/erc-ignore-highlight </span>(msg)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Don't highlight me when these things happen.&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((message (s-trim-left msg))</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        (channel (<span class="kw">or</span> (erc-default-target) <span class="st">&quot;&quot;</span>)))</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    (--any? (s-prefix? it message)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>            `(<span class="st">&quot;*** Users on&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;*** Your new nickname is&quot;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;*** Welcome to the&quot;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>              ,(concat <span class="st">&quot;*** &quot;</span> channel <span class="st">&quot;: topic set by&quot;</span>)))))</span></code></pre></div>
<p>All that’s left to do is to thread this function through to
<code>erc-log-matches</code> and the above-defined <code>slot/beep-on-match</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/erc-log-matches </span>(match-type nickuserhost message)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Log matches to extra buffer, unless they are annoying.&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">unless</span> (slot/erc-ignore-highlight message)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    (erc-log-matches match-type nickuserhost message)))</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/beep-on-match </span>(match-type _nickuserhost message)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Beep and mark the frame as urgent on highlight.&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let</span> ((visible-bell <span class="kw">nil</span>))</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">unless</span> (slot/erc-ignore-highlight message)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>      (slot/mark-emacs-urgent)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>      (erc-beep-on-match match-type _nickuserhost message))))</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co">;; As before, now add the appropriate hooks to `erc-text-matched-hook'.</span></span></code></pre></div>
<p>If it works, it works, right?</p>
<h1 id="inserting-links">Inserting links</h1>
<p>Next to being a user, I also spend way too much time working on XMonad.
As such, I often help people coming into our IRC or posting on the
subreddit with their problems. More often than not one needs to link to
the same resources over and over again—why not write something so that I
don’t have to dig up these links again and again?</p>
<p>I currently have a set-up where I can link to every XMonad module, all
of my blog posts, as well as selected extra sites, like our tutorial and
installation instructions. Depending on the given universal argument, a
different link style is used, to accomodate for different platforms.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/get-xmonad-modules </span>()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get all XMonad modules in the form (NAME . DOC-URL).&quot;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((xmonad-cabal <span class="st">&quot;~/repos/xmonad/xmonad-contrib/xmonad-contrib.cabal&quot;</span>)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>         (hackage <span class="st">&quot;https://hackage.haskell.org/package/xmonad-contrib/docs/&quot;</span>)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>         (modules (shell-command-to-string</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                   (<span class="kw">format</span> <span class="st">&quot;tail -n +50 %s | grep -E </span><span class="sc">\&quot;</span><span class="st"> XMonad</span><span class="sc">\\</span><span class="st">.*</span><span class="sc">\&quot;</span><span class="st">&quot;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                           xmonad-cabal))))</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    (-&gt;&gt; (s-lines modules)</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>         (-drop-last <span class="dv">1</span>)                 <span class="co">; empty line</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>         (--map (s-trim (s-replace <span class="st">&quot;exposed-modules:&quot;</span> <span class="st">&quot;&quot;</span> it)))</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>         (--map (<span class="kw">cons</span> it</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>                      (<span class="kw">format</span> (concat hackage (s-replace <span class="st">&quot;.&quot;</span> <span class="st">&quot;-&quot;</span> it) <span class="st">&quot;.html&quot;</span>)))))))</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/get-posts </span>()</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get all of my blog posts in the form (NAME . URL).&quot;</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">let*</span> ((website <span class="st">&quot;https://tony-zorman.com/&quot;</span>)</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>         (base-path <span class="st">&quot;~/repos/slotThe.github.io/&quot;</span>)</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>         (posts (directory-files-recursively (concat base-path <span class="st">&quot;posts/&quot;</span>) <span class="st">&quot;.md$&quot;</span>)))</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    (--map (with-temp-buffer</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>             (insert-file-contents-literally it)</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>             (search-forward <span class="st">&quot;title: &quot;</span>)</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">cons</span>                      <span class="co">; Name . URL</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>              (string-replace <span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">&quot;</span> <span class="st">&quot;&quot;</span> (buffer-substring (point) (point-at-eol)))</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>              (concat website (<span class="kw">string-trim</span> it base-path <span class="st">&quot;.md&quot;</span>) <span class="st">&quot;.html&quot;</span>)))</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>           posts)))</span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/often-used-links </span>(&amp;optional arg)</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Choose a link and insert it into the buffer in .md format.</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="st">This is quite useful, since many people happen to have very</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="st">similar problems when, for example, first starting out with</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a><span class="st">xmonad.&quot;</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>  (interactive <span class="st">&quot;P&quot;</span>)</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>  (-let* ((links</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>           (-concat '((<span class="st">&quot;tutorial&quot;</span> . <span class="st">&quot;https://xmonad.org/TUTORIAL.html&quot;</span>)</span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>                      (<span class="st">&quot;install&quot;</span>  . <span class="st">&quot;https://xmonad.org/INSTALL.html&quot;</span>)</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>                      (<span class="st">&quot;xmonad.hs&quot;</span>. <span class="st">&quot;https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs&quot;</span>))</span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>                    (slot/get-xmonad-modules)</span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>                    (slot/get-posts)))</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>          (choice (completing-read <span class="st">&quot;Link: &quot;</span> (<span class="kw">mapcar</span> #'car links)))</span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>          ((name . link) (<span class="kw">assoc</span> choice links)))</span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>    (insert <span class="st">&quot;[&quot;</span> name <span class="st">&quot;]&quot;</span>)</span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> arg</span>
<span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>        (insert <span class="st">&quot;(&quot;</span> link <span class="st">&quot;)&quot;</span>)</span>
<span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>      (save-excursion (insert <span class="st">&quot;</span><span class="sc">\n\n</span><span class="st">[&quot;</span> name <span class="st">&quot;]: &quot;</span> link)))))</span></code></pre></div>
<p>I bind this to <code>C-c l</code> in <code>markdown-mode</code>; it looks like this:</p>
<p><img class="pure-img" src="../images/emacs-potpourri/markdown-entry.gif"></p>
<h1 id="a-macro-for-repeat-mode">A macro for <code>repeat-mode</code></h1>
<p>I’ve written a macro for Emacs’s <code>repeat-mode</code>, which allows you to
execute repeated commands without having to press the same prefix over
and over again. For example, one can set this up for Org navigation
commands such that <code>C-c C-n n n</code> executes <code>org-next-visible-heading</code>
three times. A great introduction to <code>repeat-mode</code> can be found
<a href="https://karthinks.com/software/it-bears-repeating/">here</a>.</p>
<p>There are <a href="https://tildegit.org/acdw/define-repeat-map.el">lots</a> of <a href="https://github.com/mmarshall540/repeaters">packages</a>
around that define different macros which probably work much better than
the one below. Even <a href="https://github.com/jwiegley/use-package">use-package</a> now sports a <code>:repeat-map</code> keyword
now. However, obviously the one I wrote feels the most natural to <em>me</em>,
so it’s being kept around regardless.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defmacro</span><span class="fu"> defrepeatmap </span>(sym pairs &amp;optional docstring)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;A macro for defining `repeat-map's.</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="st">Defines a new repeat-map called SYM with the given DOCSTRING.</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="st">The keys are derived via the list PAIRS, whose elements are cons</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="st">cells of the form (KEY . DEF), where KEY and DEF must fulfill the</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="st">same requirements as if given to `define-key'.</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="st">If the key only consists of a single character; i.e., is already</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="st">bound and a repeat map is created afterwards, simply add it to</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="st">the repeat-map SYM.  If not, globally bind KEY to DEF and only</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="st">insert the last character of DEF into the repeat map SYM.&quot;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">declare</span> (indent <span class="dv">1</span>) (<span class="kw">debug</span> <span class="kw">t</span>))</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>  `(<span class="kw">progn</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">defvar</span><span class="fu"> </span>,sym</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>       (<span class="kw">let</span> ((kmap (make-sparse-keymap)))</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>         (--each ,pairs</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>           (-let (((key . fun) it))</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>             (<span class="kw">if</span> (length= key <span class="dv">1</span>)</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>                 (define-key kmap (kbd key) fun)</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>               (bind-key (kbd key) fun)</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>               (define-key kmap (kbd (s-right <span class="dv">1</span> key)) fun))))</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>         kmap)</span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>       ,docstring)</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>     <span class="co">;; Tell the keys they are in a repeat map.</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>     (--each (<span class="kw">mapcar</span> 'cdr (<span class="kw">cdr</span> ,sym))</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>       (put it 'repeat-map ',sym))))</span></code></pre></div>
<p>The following would, for example, bind <code>mc/mark-next-like-this-word</code> to
<code>M-s s</code> globally and to <code>s</code> in the created <code>mc-repeat-map</code>. Likewise,
<code>mc/mark-next-word-like-this</code> is bound to <code>.</code> in that map, and so on.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode lisp"><code class="sourceCode commonlisp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>(defrepeatmap mc-repeat-map</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    '((<span class="st">&quot;M-s s&quot;</span> . mc/mark-next-like-this-word)</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>      (<span class="st">&quot;C-M-.&quot;</span> . mc/mark-next-word-like-this)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>      (<span class="st">&quot;C-M-,&quot;</span> . mc/mark-previous-word-like-this)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>      (<span class="st">&quot;C-&gt;&quot;</span>   . mc/skip-to-next-like-this)</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>      (<span class="st">&quot;C-&lt;&quot;</span>   . mc/skip-to-previous-like-this))</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;`repeat-mode' keymap to repeat `multiple-cursors' bindings.&quot;</span>)</span></code></pre></div>
<p>This may be too implicit for many people, but for me it’s just right—and
that’s sort of the point of all of this, right?</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I am aware of the futility of this—Reddit is almost certainly
going to be around longer than my personal site will. And yet,
this feels more correct in some way.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>This is a placeholder that’s often used when not wanting to
explicitly quantify over an argument.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Though it’s still much smaller than whatever it is that WeeChat
auto-generates :)<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Understanding Weighted Colimits as Tensor Products of Modules</title>
    <link href="https://tony-zorman.com/posts/weighted-colimits/2022-10-15-weighted-colimits.html" />
    <id>https://tony-zorman.com/posts/weighted-colimits/2022-10-15-weighted-colimits.html</id>
    <published>2022-10-15T00:00:00Z</published>
    <updated>2022-10-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-10-15
      
        | <a title="All pages tagged 'maths'." href="/tags/maths.html">maths</a>
      
    </section>
    <section>
        
<p>If you’ve been doing category theory for any amount of time, you’ll
probably have stumbled upon enriched category theory as a way of
expressing categorical ideas internal to some context other than
<strong>Set</strong>. Reading into it, you might have come across these foreign
sounding concepts like weighted (co)limits and wondered what that was
all about—and then got lost for a few days, trying to decipher what
<a href="http://www.tac.mta.ca/tac/reprints/articles/10/tr10abs.html">Kelly</a> is talking about and why symbols resembling tensor
products are suddenly being thrown around. At least that’s what
happened to me.</p>
<p>After scouring the internet for good resources, I found two really
enlightening blog posts: one by <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007723">Todd Trimble</a> and the
other by <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007688">John Baez</a>—and they’re too good not to share.
Plus, people always say that you don’t understand a concept unless you
can explain it to someone else, so here’s my shot at it!</p>
<!--more-->
<p>I will assume familiarity with basic notions of category theory (limits,
colimits, adjunctions, monoidal categories, …), as well as elementary
abstract algebra (in particular, rings and modules). If you’re not
comfortable with these and have a lot of time to kill, I recommend
<a href="https://math.jhu.edu/~eriehl/context.pdf">Category Theory in Context</a> by Emily Riehl for the former and
<a href="https://bookstore.ams.org/gsm-56/">A Course in Algebra</a> by Ernest Vinberg for the latter.</p>
<p>Really, it’s good if you have heard about enriched category theory
before, as this is where weighted colimits tend to naturally crop; also
because I can’t possibly do the topic justice in a single blog post. I
will still try, of course, but be warned. However, weighted colimits
also appear in ordinary category theory, so if you don’t want to touch
the enriched stuff just insert <span class="math inline">\(\mathsf{Set}\)</span> whenever I write
<span class="math inline">\(\mathcal{V}\)</span> below—it will only get easier. Further, most of the <a href="#weighted-colimits">main
part</a> of the text doesn’t use enrichment at all, so
don’t be too alarmed.</p>
<p>First and foremost I must note that—more-so than elsewhere—these are
very much not my own thoughts. I’m just retelling the story in order to
understand it better myself. Sources and resources for everything are
linked <a href="#resources">at the end</a>. The key insights come from the
mentioned blog posts by <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007723">Todd Trimble</a> and <a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007688">John
Baez</a>, as well as the accompanying (resulting) <a href="https://ncatlab.org/nlab/show/weighted+colimit">nLab
article</a>.</p>
<h1 id="enriched-category-theory">Enriched Category Theory</h1>
<p>As I said, we first turn our attention to <em>enriched</em> category theory.
Before diving into the gory details, I will first discuss things a bit
more intuitively. In short, one studies not ordinary categories—whose
hom<em>sets</em> are always sets—but so-called <span class="math inline">\(\mathcal{V}\)</span>-categories, whose
hom-<em>objects</em> are objects in some “environmental” category
<span class="math inline">\(\mathcal{V}\)</span>. This category is what replaces <span class="math inline">\(\mathsf{Set}\)</span>, so it
will usually be assumed to have some <em>very</em> nice properties. For the
purposes of this blog post, I will assume that <span class="math inline">\((\mathcal{V}, \otimes, 1)\)</span> is a (small) complete and cocomplete closed symmetric monoidal
category.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> If you don’t know what some of these words mean, you can
read that as “it’s an environment in which we can think about category
theory in an effective way”.</p>
<p>In addition, I would also like to fix a <span class="math inline">\(\mathcal{V}\)</span>-category
<span class="math inline">\(\mathcal{C}\)</span> for the rest of this blog post. For the moment, you can
think of this like an ordinary category such that for any two objects
<span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span> in <span class="math inline">\(\mathcal{C}\)</span>, we have that <span class="math inline">\(\mathcal{C}(a, b) ≔ \mathrm{Hom}_{\mathcal{C}}(a, b)\)</span> is an object in <span class="math inline">\(\mathcal{V}\)</span>.
Naturally, all the usual axioms of a category—like associativity and
unitality of morphisms—ought to hold in this new setting. As you can
imagine, this makes certain things more complicated. The fact that
<span class="math inline">\(\mathcal{C}(a,b)\)</span> is an object in <span class="math inline">\(\mathcal{V}\)</span> means that it is now a
black box—we can’t peek into it anymore! Writing <span class="math inline">\(f \in \mathcal{C}(a,b)\)</span> is no longer legal, so we somehow have to make due
with not talking about individual morphisms. A little bit more care has
to be taken for the precise definition of an enriched category to make
sense. First, however, I will show you a few examples.</p>
<p>Thankfully—lest the world explodes—categories enriched in <span class="math inline">\(\mathsf{Set}\)</span>
are exactly ordinary categories. Likewise, a lot of categories that
people are interested in and you may be familiar with arise in this way:
2-categories (in the strict sense) are categories enriched over
<span class="math inline">\(\mathsf{Cat}\)</span>, preadditive categories are those enriched over
<span class="math inline">\(\mathsf{Ab}\)</span>, and <span class="math inline">\(k\)</span>-linear categories are ones enriched over
<span class="math inline">\(\mathsf{Vect}_k\)</span>. Further, rings can also be seen as categories.
Namely, they have just a single object <span class="math inline">\(\star\)</span> and
<span class="math inline">\(\mathrm{Hom}(\star,\star)\)</span> forms an abelian group—more on that later.</p>
<p>With these examples in mind, let us explore the technical definition of
a category enriched over <span class="math inline">\(\mathcal{V}\)</span>. Formally, such a <span class="math inline">\(\mathcal{C}\)</span>
consists of:</p>
<ul>
<li>A collection of objects <span class="math inline">\(\mathrm{ob}\, \mathcal{C}\)</span>.</li>
<li>For <span class="math inline">\(x, y \in \mathcal{C}\)</span>, a hom-object
<span class="math inline">\(\mathcal{C}(x, y) \in \mathcal{V}\)</span>.</li>
<li>For <span class="math inline">\(x, y, z \in \mathcal{C}\)</span>, a composition map in <span class="math inline">\(\mathcal{V}\)</span>:
<span class="math display">\[
  \circ_{x, y, z} \colon \mathcal{C}(y, z) \times \mathcal{C}(x, y)
                  \longrightarrow \mathcal{C}(x, z).
\]</span></li>
<li>For <span class="math inline">\(x \in \mathcal{C}\)</span> an identities map
<span class="math inline">\(e_x \colon 1 \longrightarrow \mathcal{C}(x,x)\)</span>.</li>
</ul>
<p>Further, this data has to satisfy appropriate associativity and
unitality conditions:</p>
<p><img class="pure-img" src="./enriched.png"></p>
<p>In the above diagrams, <span class="math inline">\(\alpha\)</span>, <span class="math inline">\(\lambda\)</span>, and <span class="math inline">\(\rho\)</span> respectively
denote the associativity, left, and right unitality constraints of
<span class="math inline">\(\mathcal{V}\)</span>.</p>
<p>If these diagrams remind you of a <a href="https://ncatlab.org/nlab/show/monoidal+category">monoidal
category</a>, they absolutely should! Much like
you can think of ordinary categories as multi-object monoids, a decent
mental model for <span class="math inline">\(\mathcal{V}\)</span>-categories is to think of them as
multi-object monoidal categories.</p>
<h2 id="functors-and-natural-transformations">Functors and Natural Transformations</h2>
<p>We furthermore need analogues for functors and natural
transformations—they now also come with a <span class="math inline">\(\mathcal{V}\)</span>- prefix. The
functor laws get a bit more complicated, as we can’t simply say that
<span class="math inline">\(F(f \circ g) = Ff \circ Fg\)</span>, for some arrows <span class="math inline">\(f\)</span> and <span class="math inline">\(g\)</span>, and need to
draw commutative diagrams instead (remember that we can’t talk about
individual arrows anymore). However, most of the intuition you already
have about functors and natural transformations should carry over just
fine. I will leave the technical definitions of enriched functors and
natural transformations as exercises to the reader—they are relatively
straightforward to write down and not all that important for what
follows.</p>
<p>The upshot of all of this is that, in order to do enriched category
theory, we not only need analogues for functors and natural
transformations, but also for all the other basic notions of ordinary
category theory. Since limits and colimits are among the most important
constructions, people naturally started to think about how one could
express them in the enriched language—this is precisely what lead to the
development of weighted colimits!</p>
<p>One interesting thing I want to highlight about enriched functors is the
induced arrow on morphisms that an <span class="math inline">\(F \colon \mathcal{C} \longrightarrow \mathcal{V}\)</span> always comes with. Namely, <span class="math inline">\(\mathcal{C}(a, b) \longrightarrow \mathcal{V}(F a, F b)\)</span>. Because <span class="math inline">\(\mathcal{V}\)</span> is
symmetric monoidal, we can use the tensor-hom adjunction and rewrite the
above to look more like an action:</p>
<p><span class="math display">\[
  \mathcal{C}(a, b) \otimes F a \longrightarrow F b.
\]</span></p>
<p>Likewise, a <span class="math inline">\(\mathcal{V}\)</span>-functor <span class="math inline">\(F \colon \mathcal{C}^{\mathrm{op}} \longrightarrow \mathcal{V}\)</span> comes equipped with an “action” from the
other side:</p>
<p><span class="math display">\[
  F b \otimes \mathcal{C}(a, b) \longrightarrow F a.
\]</span></p>
<h1 id="copowers">Copowers</h1>
<p>Before we get to the fun stuff, we have to talk about one more important
technical detail: copowers. The basic idea is that in any ordinary
monoidal category <span class="math inline">\((\mathcal{A}, \otimes_{\mathcal{A}}, 1_{\mathcal{A}})\)</span>, we have the tensor-hom adjunction (also called
<em>currying</em>) <span class="math inline">\({-} \otimes b \dashv [b, {-}]\)</span>. In particular, this means
that</p>
<p><span class="math display">\[
  \mathcal{A}(a \otimes_{\mathcal{A}} b, c) \cong \mathcal{A}(a, [b, c]),
  \qquad \text{for } a, b, c \in \mathcal{A}.
\]</span></p>
<p>If we’re in an enriched setting, we want to somehow “switch out” the
tensor product of the monoidal category with some action, say <span class="math inline">\(\cdot \colon \mathcal{C} \times \mathcal{V} \longrightarrow \mathcal{C}\)</span>,
while retaining this nice property. As such, the <em>copower</em> of <span class="math inline">\(c \in \mathcal{C}\)</span> <em>by a</em> <span class="math inline">\(v \in \mathcal{V}\)</span> is an object <span class="math inline">\(c \cdot v \in \mathcal{C}\)</span>, such that for all <span class="math inline">\(b \in \mathcal{C}\)</span>, there is a natural
isomorphism</p>
<p><span class="math display">\[
  \mathcal{C}(c \cdot v, b) \cong \mathcal{V}(v, \mathcal{C}(c, b)).
\]</span></p>
<p>Above I have slightly abused notation; <span class="math inline">\(\mathcal{V}({-}, {-})\)</span> now
denotes the <em>internal</em> hom of <span class="math inline">\(\mathcal{V}\)</span>, instead of the external
one. If <span class="math inline">\(\mathcal{V}\)</span> is clear from the context, one also often writes
<span class="math inline">\([{-},{-}]\)</span> here. Also do remember that <span class="math inline">\(\mathcal{C}(a,b)\)</span> is an object
in <span class="math inline">\(\mathcal{V}\)</span> now!</p>
<p>The best thing about copowers is their existence when it comes to
<span class="math inline">\(\mathsf{Set}\)</span> and ordinary categories. If <span class="math inline">\(\mathcal{A}\)</span> has all
coproducts, there is a canonical copower <span class="math inline">\(\cdot \colon \mathsf{Set} \times \mathcal{A} \longrightarrow \mathcal{A}\)</span>.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> For all <span class="math inline">\(X \in \mathsf{Set}\)</span> and <span class="math inline">\(a \in \mathcal{A}\)</span>, it is given by</p>
<p><span class="math display">\[
  X \cdot a ≔     \coprod_{x \in X} 1_{\mathcal{A}} \otimes_{\mathcal{A}} a
            \cong \coprod_{x \in X} a.
\]</span></p>
<p>The fact that this is a copower follows from</p>
<p><span class="math display">\[
  \mathcal{A}(X \cdot a, b) = \mathcal{A}(\coprod_{x \in X} a, b)
  \cong \prod_{x \in X} \mathcal{A}(a, b) \cong \mathsf{Set}(X, \mathcal{A}(a, b)),
\]</span></p>
<p>for all <span class="math inline">\(b \in \mathcal{A}\)</span>. Because of the closeness to the tensor
product, people sometimes call copowers “tensors” and write them with
the same symbol as they write the tensor product.</p>
<h1 id="weighted-colimits">Weighted Colimits</h1>
<p>Onto the main dish. The key idea is to reframe an ordinary colimit in
terms of “looking like a monoidal product”. The weighted colimit then
becomes something akin to the tensor product over a k-algebra <span class="math inline">\(R\)</span>. We
like rings and modules, so let’s explore this further.</p>
<p>To recap, when looking at bimodules <span class="math inline">\(A\)</span> and <span class="math inline">\(B\)</span> over some <span class="math inline">\(k\)</span>-algebra
(ring) <span class="math inline">\(R\)</span> we can define the tensor product of <span class="math inline">\(A\)</span> and <span class="math inline">\(B\)</span> over <span class="math inline">\(R\)</span>, in
symbols <span class="math inline">\(A \otimes_R B\)</span>, as the coequaliser</p>
<p><span class="math display">\[
  A \otimes_R B
  ≔ \mathrm{coeq} \left(
      A \otimes R \otimes B \rightrightarrows A \otimes B
    \right),
\]</span></p>
<p>where the two parallel arrows are induced by the left and right actions
<span class="math inline">\(\rhd \colon A \otimes R \longrightarrow A\)</span> and <span class="math inline">\(\lhd \colon R \otimes B \longrightarrow B\)</span>, respectively.</p>
<p>For ease of notation, I will often write coequalisers like the above one
as</p>
<p><span class="math display">\[
  A \otimes R \otimes B \rightrightarrows A \otimes   B
                        \longrightarrow   A \otimes_R B.
                                                            \tag{1}
\]</span></p>
<p>Categorifying this notion, the ring <span class="math inline">\(R\)</span> can be seen as a one-object
category enriched over <span class="math inline">\(\mathsf{Ab}\)</span> with object <span class="math inline">\(1 \in R\)</span>. The
multiplication is recovered as function composition in <span class="math inline">\(R(1, 1)\)</span> and the
addition is given by the abelian structure. A right <span class="math inline">\(R\)</span>-module <span class="math inline">\(A\)</span> is
then an enriched functor <span class="math inline">\(A \colon R^{\mathrm{op}} \longrightarrow \mathsf{Ab}\)</span> and a left R-module is an enriched functor <span class="math inline">\(B \colon R \longrightarrow \mathsf{Ab}\)</span>. Inserting the definition discussed above,
we have that <span class="math inline">\(A\)</span> consists of a single object <span class="math inline">\(A1\)</span> and a single map <span class="math inline">\(A1 \otimes R(1, 1) \longrightarrow A1\)</span>. Likewise, we obtain <span class="math inline">\(B1\)</span> and
<span class="math inline">\(R(1,1) \otimes B1 \longrightarrow B1\)</span> in <span class="math inline">\(\mathcal{V}\)</span>. Thus, we have
induced arrows</p>
<p><span class="math display">\[
    A1 \otimes R(1,1) \otimes B1 \rightrightarrows A1 \otimes B1.
\]</span></p>
<p>Let us forget about enrichment for a while and just study ordinary
categories now. The second observation we need is the well-known fact
that any colimit can be represented as a coequaliser. Suppose
<span class="math inline">\(\mathcal{D}\)</span> to be a (cocomplete) category . Given a functor <span class="math inline">\(F \colon \mathcal{J} \longrightarrow \mathcal{D}\)</span> we can express its colimit as</p>
<p><span class="math display">\[
  \coprod_{a, b \in \mathcal{J}}
            \coprod_{f \in \mathcal{J}(a, b)} F a
  \rightrightarrows \coprod_{b \in \mathcal{J}} F b
  \longrightarrow   \mathrm{colim}_\mathcal{J} F.
\]</span></p>
<p>Note that we can use what we learned about (<span class="math inline">\(\mathsf{Set}\)</span>-valued)
copowers above and write <span class="math inline">\(\coprod_{f \in \mathcal{J}(a, b)} F a\)</span> as
<span class="math inline">\(\mathcal{J}(a, b) \cdot F a\)</span>, or even <span class="math inline">\(\mathcal{J}(a, b) \times F a\)</span>,
as <span class="math inline">\(\mathcal{J}(a,b)\)</span> is a set in this case. Behold:</p>
<p><span class="math display">\[
  \coprod_{a, b \in \mathcal{J}} \mathcal{J}(a,b) \times F a
  \rightrightarrows \coprod_{b \in \mathcal{J}} F b
  \longrightarrow \mathrm{colim}_\mathcal{J} F.
                                                                \tag{2}
\]</span></p>
<p>What’s left is to define the two parallel arrows.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<ol type="1">
<li><p>One arrow is induced by the “projection” <span class="math inline">\(\pi_2 \colon \mathcal{J}(a, b) \times F a \longrightarrow F a\)</span>. Note that
<span class="math inline">\(\mathcal{J}(a, b) \times F a\)</span> is really a copower and so the
existence of such an arrow is not immediately clear. We have a
functor <span class="math inline">\({-} \times F j \colon \mathsf{Set} \longrightarrow \mathcal{C}\)</span> and so <span class="math inline">\(\pi_2\)</span> is actually the application of the
unique map<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>
<span class="math inline">\(! \colon \mathcal{J}(a, b) \longrightarrow \{\star\}\)</span>
to that functor; i.e.,</p>
<p><span class="math display">\[
! \times F a \colon \mathcal{J}(a,b) \times F a \longrightarrow \{\star\} \times F a \cong F a.
\]</span></p></li>
<li><p>The other arrow is induced by a collection of actions of
<span class="math inline">\(\mathcal{J}\)</span> on <span class="math inline">\(F\)</span>, indexed by arrows <span class="math inline">\(f \colon a \longrightarrow b\)</span> in <span class="math inline">\(\mathcal{J}\)</span>; i.e.,</p>
<p><span class="math display">\[
(\mathcal{J}(a,b) \times F a \longrightarrow F b)
= \left( \coprod_{f \in \mathcal{J}(a,b)} F a \longrightarrow F b \right)
= \langle Ff \colon Fa \longrightarrow F b \rangle_{f \in \mathcal{J}(a,b)}.
\]</span></p></li>
</ol>
<p>So that’s the story with expressing colimits as coequalisers. What’s
next is that we need to completely reframe this in terms of actions.
For the second arrow we are already done: <span class="math inline">\(F\)</span> can be seen as a left
<span class="math inline">\(\mathcal{J}\)</span>-module.</p>
<p>Using the symmetry of the Cartesian product <span class="math inline">\(\times\)</span> of sets, the arrow
<span class="math inline">\(\mathcal{J}(a, b) \longrightarrow \{\star\}\)</span> can be reinterpreted as
the components of a right action of <span class="math inline">\(\mathcal{J}\)</span> on the terminal
functor <span class="math inline">\(\mathbb{T} \colon \mathcal{J} \longrightarrow \mathsf{Set}\)</span>
that sends every object to the one-element set <span class="math inline">\(\{\star\}\)</span>:</p>
<p><span class="math display">\[
  (\mathbb{T}b \times \mathcal{J}(a,b) \longrightarrow \mathbb{T}a)
  =     (\{\star \} \times \mathcal{J}(a,b) \longrightarrow \{\star\})
  \cong (\mathcal{J}(a,b) \longrightarrow \{\star\}).
\]</span></p>
<p>Putting these two observations together, we really have two induced
arrows with type signature</p>
<p><span class="math display">\[
  \mathbb{T} b \times \mathcal{J}(a, b) \times F a \longrightarrow \mathbb{T} a \times F a.
\]</span></p>
<p>Inserting these into Equation <span class="math inline">\(2\)</span>, this yields</p>
<p><span class="math display">\[
  \coprod_{a, b \in \mathcal{J}} \mathcal{J}(a,b) \times F a
    \cong             \coprod_{a, b \in \mathcal{J}} \mathbb{T} b \times \mathcal{J}(a, b) \times F a
    \rightrightarrows \coprod_{a \in \mathcal{J}} \mathbb{T} a \times F a
    \cong             \coprod_{a \in \mathcal{J}} F a.
\]</span></p>
<p>This is exactly the way the tensor product of bimodules is defined in
Equation <span class="math inline">\(1\)</span>, hence it is very tempting to write the resulting
coequaliser as <span class="math inline">\(1 \otimes_{\mathcal{J}} F\)</span>. As such, a colimit of a
functor <span class="math inline">\(F\)</span> over <span class="math inline">\(\mathcal{J}\)</span> can be seen as a tensor product of
functors with the terminal functor. Now, the terminal functor is not
very interesting; what if we replace it with something more complicated?
Well, that’s exactly the point where weighted colimits come into play!
Using a <em>weight</em> <span class="math inline">\(W\)</span> instead of <span class="math inline">\(\mathbb{T}\)</span>, we would end up with
something like</p>
<p><span class="math display">\[
  \coprod_{a, b \in \mathcal{J}} W b \times \mathcal{J}(a, b) \times F a \rightrightarrows \coprod_{a \in \mathcal{J}} W a \times F a \longrightarrow W \otimes_{\mathcal{J}} F.
\]</span></p>
<p>Because this looks like a tensor product—and it’s universal, due to it
being a colimit—it should support some sort of currying operation: given
an arrow <span class="math inline">\(W \otimes_{\mathcal{J}} F \longrightarrow c\)</span>, for some object
<span class="math inline">\(c \in \mathcal{C}\)</span>, we should be able to obtain an arrow <span class="math inline">\(W \implies \mathcal{C}(F, c)\)</span>. Now’s your time to guess what exactly a weighted
colimit will be!</p>
<h2 id="definition">Definition</h2>
<p>Still in the non-enriched setting, let me now give you the formal
definition of a weighted colimit. Suppose <span class="math inline">\(\mathcal{J}\)</span> to be a small
category. Let <span class="math inline">\(W \colon \mathcal{J}^{\mathrm{op}} \longrightarrow \mathsf{Set}\)</span> be a presheaf—the <em>weight</em>—and suppose we have a functor
<span class="math inline">\(F \colon \mathcal{J} \longrightarrow \mathcal{A}\)</span>. The <em><span class="math inline">\(W\)</span>-weighted
colimit of <span class="math inline">\(F\)</span></em> comprises an object <span class="math inline">\(W \otimes_{\mathcal{J}} F \in \mathcal{A}\)</span>, and a natural (in <span class="math inline">\(a \in \mathcal{A}\)</span>) isomorphism</p>
<p><span class="math display">\[
  \mathcal{A}(W \otimes_{\mathcal{J}} F, a)
  \cong
  [\mathcal{J}^{\mathrm{op}}, \mathsf{Set}] (W, \mathcal{A}(F, a)).
\]</span></p>
<p>Note that, by the <a href="nlab:yoneda">Yoneda lemma</a>, the above isomorphism is
uniquely determined by a natural transformation <span class="math inline">\(W \implies \mathcal{A}(F, W \otimes_{\mathcal{J}} F)\)</span>. As promised, this is
exactly the representation we arrived at above.</p>
<p>A pair of an object <span class="math inline">\(c \in \mathcal{A}\)</span> and a natural transformation <span class="math inline">\(W \implies \mathcal{A}(F, c)\)</span> on their own; i.e., without the universal
property, is what one would normally call a <em><span class="math inline">\(W\)</span>-weighted cocone</em>.</p>
<h2 id="enriched-weighted-colimits">Enriched Weighted Colimits</h2>
<p>The enriched definition is now exactly the same! If <span class="math inline">\(\mathcal{J}\)</span> is a
small <span class="math inline">\(\mathcal{V}\)</span>-category and we have <span class="math inline">\(\mathcal{V}\)</span>-functors <span class="math inline">\(F \colon \mathcal{J} \longrightarrow \mathcal{C}\)</span> and <span class="math inline">\(W \colon \mathcal{J}^{\mathrm{op}} \longrightarrow \mathcal{V}\)</span>, then we can
define the <em><span class="math inline">\(W\)</span>-weighted colimit of <span class="math inline">\(F\)</span></em> as an object <span class="math inline">\(W \otimes_{\mathcal{J}} F \in \mathcal{C}\)</span>, and a <span class="math inline">\(\mathcal{V}\)</span>-natural
(in <span class="math inline">\(c \in \mathcal{C}\)</span>) isomorphism</p>
<p><span class="math display">\[
  \mathcal{C}(W \otimes_{\mathcal{J}} F, c)
  \cong
  [\mathcal{J}^{\mathrm{op}}, \mathcal{V}] (W {-}, \mathcal{C}(F {-}, c)).
\]</span></p>
<p>This is the power of this definition—it extends in a straightforward way
to the enriched setting. This may now be used to great effect: in case
you know what this means, among other things weighted colimits can be
used to define the right notion of enriched coend.</p>
<h2 id="examples">Examples</h2>
<p>It’s probably about time for some examples. For the first two, let us
focus on cocones only; this is perhaps a little easier to understand
than also throwing the universal property in there. I learned these
from Richard Garner during <a href="https://conferences.leeds.ac.uk/bcqt2022/">BCQT 2022</a>.</p>
<ol type="1">
<li><p>Suppose our diagram category is the category with two objects and one
non-trivial morphism; i.e., <span class="math inline">\(\mathcal{J} ≔ \{ \varphi \colon a \longrightarrow b \}\)</span>. Further, assume that the weight <span class="math inline">\(W\)</span> picks
out<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> the unique arrow <span class="math inline">\(\{ 0, 1 \} \longrightarrow \{ 1 \}\)</span> in
<span class="math inline">\(\mathsf{Set}\)</span>. The functor <span class="math inline">\(F \colon \mathcal{J} \longrightarrow \mathcal{C}\)</span> we would like to look at sends <span class="math inline">\(a, b \in \mathcal{J}\)</span> to
<span class="math inline">\(x, y \in \mathcal{C}\)</span> and <span class="math inline">\(\varphi\)</span> to <span class="math inline">\(\theta \colon x \longrightarrow y\)</span>.</p>
<p>Again by the Yoneda lemma we have that a cocone is given by a natural
transformation <span class="math inline">\(W \implies \mathcal{C}(F, c)\)</span>. In this restricted
setting, an arrow <span class="math inline">\(Wa \longrightarrow \mathcal{A}(Fb, c)\)</span> just picks
out two morphisms. Thus, the whole thing amounts to the
commutativity of the following diagram:</p>
<p><img class="pure-img" src="./example-1.png"></p>
<p>In more plain language, we have a commutative diagram of the form</p>
<p><span class="math display">\[
  (x \xrightarrow{\;\;\theta\;\;} y \xrightarrow{\;\;g\;\;} c)
  = (x \xrightarrow{\;\;\theta\;\;} y \xrightarrow{\;\;f\;\;} c),
\]</span></p></li>
<li><p>A slightly more complicated example is the following. Assume again
that <span class="math inline">\(\mathcal{J} = \{ \varphi \colon a \longrightarrow b \}\)</span> as
above, only this time don’t work over <span class="math inline">\(\mathsf{Set}\)</span> but over
<span class="math inline">\(\mathsf{Cat}\)</span>. This means that the weight <span class="math inline">\(W\)</span> is now a functor from
<span class="math inline">\(\mathcal{A}^{\mathrm{op}}\)</span> to <span class="math inline">\(\mathsf{Cat}\)</span>. Suppose it picks out
the arrow</p>
<p><span class="math display">\[
\{ 0 \;\; 1 \} \hookrightarrow \{ 0 \cong 1 \},
\]</span></p>
<p>where these are understood to be categories. Now, a weighted cocone
becomes something 2-categorical. We still pick out arrows <span class="math inline">\(f\)</span> and
<span class="math inline">\(g\)</span>, but since the category we are looking at is not the terminal
one, but contains an isomorphism, the commutative diagram also
becomes more complicated. Namely, we required the commutativity of</p>
<p><img class="pure-img" src="./example-2.png"></p>
<p>Instead of the requiring <span class="math inline">\(\theta \circ g\)</span> to <em>equal</em> <span class="math inline">\(\theta \circ f\)</span>, we now only require the existence of an invertible 2-cell that
mediates between the two.</p></li>
<li><p>A subcategory <span class="math inline">\(\mathcal{D}\)</span> of <span class="math inline">\(\mathcal{E}\)</span> is said to be <em>dense</em> in
<span class="math inline">\(\mathcal{E}\)</span> if we can, in some sense, approximate the objects of
<span class="math inline">\(\mathcal{E}\)</span> well enough with only objects in <span class="math inline">\(\mathcal{D}\)</span> (think
of the density of <span class="math inline">\(\mathbb{Q}\)</span> inside <span class="math inline">\(\mathbb{R}\)</span>). Dense
categories are nice because they often tell us a lot about their
super categories and are sometimes easier to reason about. For
example, the category of finite-dimensional (left-)comodules of any
(possibly infinite-dimensional) Hopf algebra is dense inside the
category of all comodules, which makes them much easier to work with
than modules.</p>
<p>Formally, <span class="math inline">\(\mathcal{D}\)</span> is dense in <span class="math inline">\(\mathcal{E}\)</span> if the restricted
Yoneda embedding along the inclusion functor <span class="math inline">\(\iota \colon \mathcal{D} \hookrightarrow \mathcal{E}\)</span></p>
<p><span class="math display">\[
  \mathcal{E} \longrightarrow [\mathcal{E}^{\mathrm{op}}, \mathsf{Set}]
    \xrightarrow{\;[\iota, \mathsf{Set}]\;} [\mathcal{D}^{\mathrm{op}}, \mathsf{Set}]
\]</span></p>
<p>is still fully faithful. Another way of saying this is that every
object <span class="math inline">\(e \in \mathcal{E}\)</span> is the <span class="math inline">\(\mathcal{E}(\iota, e)\)</span>-weighted
colimit of <span class="math inline">\(\iota\)</span>. Indeed, the isomorphism we have for a weighted
colimit specialised to our situation looks like</p>
<p><span class="math display">\[
\mathcal{E}(e, a) \cong [\mathcal{D}^{\mathrm{op}}, \mathsf{Set}] (\mathcal{E}(\iota, e), \mathcal{E}(\iota, a)),
\]</span></p>
<p>for all <span class="math inline">\(a \in \mathcal{E}\)</span>. This is exactly what it means for the
above arrow to be fully faithful.</p></li>
</ol>
<p><em>Exercise</em>: Try to find a weight such that one recovers a normal,
unweighted, cocone.</p>
<p><em>Exercise</em>: As you can imagine 1. and 2. can be used to produce all
kinds of relations between <span class="math inline">\(f\)</span> and <span class="math inline">\(g\)</span>. As such, prove the following
statements:</p>
<ul>
<li><p>A variant of 1.: in the case of the weight being <span class="math inline">\(\{0, 1\} \xrightarrow{\;\;\mathrm{id}\;\;} \{0, 1\}\)</span>, we obtain a
not-necessarily-commutative diagram.</p></li>
<li><p>A variant of 2.: in the case that the weight is <span class="math inline">\(\{ 0 \} \hookrightarrow \{ 0 \longrightarrow 1 \}\)</span> (i.e., we only have an
arrow between 0 and 1 and not necessarily an isomorphism), we get an
ordinary (non-invertible) 2-cell as the weighted cocone.</p></li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>And that’s it! I’ve found this intuition very helpful in trying to wrap
my head around these concepts—hopefully other people will too. As a
parting gift, I leave you with some more things to think about.</p>
<p>First, one of the most important examples of weighted colimits—and
coends, of course—is the <a href="https://ncatlab.org/nlab/show/tensor+product+of+functors">tensor product of
functors</a>. If you ever wanted to be a
<a href="https://ncatlab.org/nlab/show/co-Yoneda+lemma">ninja</a>, now is the time! It’s a fun operation to think
about and play around with, and I would invite you to do just that.</p>
<p>Lastly, the category of weights <span class="math inline">\([\mathcal{J}^{\mathrm{op}}, \mathcal{V}]\)</span> is actually very special: it is the free cocompletion of
<span class="math inline">\(\mathcal{J}\)</span>. Every functor <span class="math inline">\(G \colon \mathcal{J} \longrightarrow \mathcal{A}\)</span> extends uniquely (up to unique isomorphism) to a
cocontinuous functor <span class="math inline">\([\mathcal{J}^{\mathrm{op}}, \mathcal{V}]\)</span> to
<span class="math inline">\(\mathcal{A}\)</span> by the assignment <span class="math inline">\(W \mapsto W \otimes_{\mathcal{J}} G\)</span>
(note the tensor product of functors!).</p>
<h1 id="resources">(Re)sources</h1>
<ul>
<li><p>Monoidal Category Theory:</p>
<ul>
<li><p>Saunders Mac Lane: “Natural associativity and commutativity”.
In: Rice Univ. Stud. 49.4 (1963), pp. 28–46. issn: 0035-4996.</p></li>
<li><p>Pavel Etingof, Shlomo Gelaki, Dmitri Nikshych, and Victor Ostrik:
“Tensor categories”. In: Vol. 205. Mathematical Surveys and
Monographs. American Mathematical Society, Providence, RI, 2015,
pp. xvi+343.</p></li>
<li><p><a href="https://ncatlab.org/nlab/show/monoidal+category">nLab: monoidal category</a></p></li>
</ul></li>
<li><p>Enriched Category Theory:</p>
<ul>
<li><p>Max Kelly: “Basic concepts of enriched category theory”. In: London
Math. Soc. Lec. Note Series 64, Cambridge Univ. Press 1982, 245
pp. (ISBN:9780521287029).</p>
<p>Republished as: Reprints in Theory and Applications of Categories,
No. 10 (2005) pp. 1-136 (<a href="http://www.tac.mta.ca/tac/reprints/articles/10/tr10abs.html">link</a>)</p></li>
<li><p><a href="https://ncatlab.org/nlab/show/enriched+category">nLab: enriched category</a></p></li>
</ul></li>
<li><p>Copowers:</p>
<ul>
<li><a href="https://ncatlab.org/nlab/show/copower">nlab: copower</a></li>
</ul></li>
<li><p>Weighted Colimits:</p>
<ul>
<li><p><a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007723">Todd Trimble on the n-Category Café</a></p></li>
<li><p><a href="https://golem.ph.utexas.edu/category/2007/02/day_on_rcfts.html#c007688">John Baez on the n-Category Café</a></p></li>
<li><p><a href="https://ncatlab.org/nlab/show/weighted+colimit">nLab: weighted colimit</a></p></li>
<li><p>Richard Garner: Bicategories; lecture series at <a href="https://conferences.leeds.ac.uk/bcqt2022/">BCQT 2022, Leeds</a>.</p></li>
<li><p>Emily Riehl: “Weighted Limits and Colimits”; <a href="https://math.jhu.edu/~eriehl/weighted.pdf">lecture notes</a>.</p></li>
</ul></li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>This is also sometimes called a <em>cosmos</em>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>If the category <span class="math inline">\(\mathcal{A}\)</span> is locally small. I will ignore
those kinds of technicalities for the purposes of this post.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>I mostly follow Trimble and the nLab here. A more explicit
description (in the case of limits, but it should be easy enough
to dualise) is given, for example, in <a href="https://math.jhu.edu/~eriehl/context.pdf">Category Theory in
Context</a>, Theorem 3.2.13.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>The one-element set <span class="math inline">\(\{\star\}\)</span> is the terminal object in
<span class="math inline">\(\mathsf{Set}\)</span>, hence by definition there is exactly one arrow from
any other set to it.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>By sending <span class="math inline">\(a\)</span> to <span class="math inline">\(\{0, 1\}\)</span>, <span class="math inline">\(b\)</span> to <span class="math inline">\(\{ 1 \}\)</span>, and <span class="math inline">\(\varphi\)</span> to
<span class="math inline">\(\{0, 1\} \longrightarrow \{1\}\)</span>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>XMonad Module Showcase: X.A.TopicSpace</title>
    <link href="https://tony-zorman.com/posts/topic-space/2022-09-11-topic-spaces.html" />
    <id>https://tony-zorman.com/posts/topic-space/2022-09-11-topic-spaces.html</id>
    <published>2022-09-11T00:00:00Z</published>
    <updated>2022-09-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-09-11
      
        | <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html">xmonad</a>
      
    </section>
    <section>
        
<p>One of my favourite—and most used—modules is XMonad.Actions.TopicSpace.
However, it seems relatively unknown among the general XMonad community.
I fear this is due to the fact that the module is quite old and formerly
had a rather high barrier to entry. Despite having been given shiny
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">new documentation</a>, lots of people probably did not bother
revisiting it and thus still don’t really understand why they might be
interested in using topics instead of workspaces. Time to change that!</p>
<!--more-->
<h1 id="introduction">Introduction</h1>
<p>First of all, this post is not to be seen as a tutorial on
X.A.TopicSpace, but much rather as a showcase of how its functionality
could be used day to day. If you like what you see, perhaps check out
the <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Actions-TopicSpace.html">docs</a> and give it a spin yourself! I have already
written an introduction to the module in the post about my <a href="../phd-workflow/2022-05-01-my-phd-workflow.html">research
workflow</a>:</p>
<blockquote>
<p>XMonad has a module called TopicSpace, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results
in a very clean separation of concerns. Plus, I always know where my
windows are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the
topic is switched to and empty, associated to it. While most
convenient for programming related tasks—e.g., spawn <code>ghcid</code> in the
relevant directory or automatically build and open this website—it’s
also quite convenient for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is
done fuzzily via the XMonad prompt, which means I only have to type a
few characters to get to my destination. This makes it feasible to
have 30 topics, instead of the usual 9 or so, in the first place. As
a result, it’s rather fast to go from thinking about a certain problem
to working on it.</p>
</blockquote>
<p>At a glance, this probably does not sound very impressive—so one can
have a directory and some function associated to a workspace (hereafter
also called “topic”), big deal. However, we will see that with a bit of
creativity this can be used to great effect.</p>
<h1 id="examples">Examples</h1>
<h2 id="basic-topics">Basic topics</h2>
<p>The most obvious application of all of this is to have workspaces that
do one and only one thing. For example, I have a topic dedicated to
connecting to a VPN, should the need arise. Naturally, I automatically
want to execute <code>openvpn</code> and pick a random server whenever I happen to
enter that workspace and it’s empty (i.e., <code>openvpn</code> is not already
running).</p>
<p>More such use cases include having a topic dedicated to my RSS feed
reader, instant messaging, or IRC. Since I only show workspaces with
windows on them in xmobar, I can just glance at my status bar to find
out whether I currently have, for example, IRC open. No additional
program for checking the status of things necessary! Obviously, this
<em>modus operandi</em> takes a bit of discipline to uphold over the course of
the day, but I find that such a separation of concerns greatly reduces
mental load regarding what’s currently happening on my computer.
Definitely worth it.</p>
<p>In terms of code, this—as well as the following examples—heavily use the
<a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">new interface</a> to XMonad.Util.Run, which allows one to
spawn processes in a declarative and compositional way; I’ve <a href="../2022-05-25-calling-emacs-from-xmonad.html">written
about this</a> in another post. For example, my RSS topic is
specified thusly:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (inHome)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Util.Run</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  , inHome <span class="st">&quot;7:RSS&quot;</span> <span class="op">$</span> proc <span class="op">$</span> inEditor</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> setFrameName <span class="st">&quot;elfeed&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&gt;-&gt;</span> execute (elispFun <span class="st">&quot;elfeed&quot;</span>)</span></code></pre></div>
<p>Here, <code>inHome</code> is a little helper function that takes a topic name and
an action, and creates a new topic with <code>$HOME</code> as its associated
directory.</p>
<p>You can find all of my topics (and there are a lot of them)
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L219-L265">here</a>.</p>
<h2 id="spawning-everything-in-the-topic-directory">Spawning <em>everything</em> in the topic directory</h2>
<p>More generally, programming projects in the same language almost always
require me to open the same set of standard tools, so it’s extremely
convenient to directly spawn them upon first visit. This allows for
very little friction before starting to work on whatever I wanted to
work on.</p>
<p>For example, I want to open Emacs and <a href="https://github.com/ndmitchell/ghcid">ghcid</a> in every Haskell project
of mine—so why not automate this? Using what X.U.Run gives us, we can
quickly throw together a function that executes the given instruction
inside of a terminal:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- import XMonad.Actions.TopicSpace (currentTopicDir)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- 'topicConfig' is my personal topic configuration.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Execute a program in the topic directory (inside a terminal).</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">executeInTopic ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>executeInTopic p <span class="ot">=</span> proc <span class="op">$</span> (termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                      <span class="op">&gt;-&gt;</span> execute p</span></code></pre></div>
<p>Similar functions can be created for spawning the terminal and editor:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Whatever you're looking for, it's probably in X.A.TopicSpace</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- or X.U.Run.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn terminal in topic directory.</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>spawnTermInTopic <span class="ot">=</span> proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn editor in the current topic directory.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEditorInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>spawnEditorInTopic <span class="ot">=</span> proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Check the documentation of <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-Run.html#g:EDSL">XMonad.Util.Run</a> to see how <code>inEditor</code> and
<code>termInDir</code> are defined and may be customised.</p>
<p>In my mathematical and other work-adjacent projects I keep it pretty
simple; an editor there is mostly sufficient.</p>
<p><img class="pure-img" src="../phd-workflow/topics.gif"></p>
<p>But we can also get a little bit more fancy. Since the topic action is
just a general <code>X</code> action, we can really do anything we want in there.
In addition to spawning programs, all of my Haskell projects should
default to the <code>Hacking</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> layout:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>And Voilà, we can now attach this action to all the topics that we want!</p>
<p>Note that the <code>*&gt;</code> operator is—in this case—just the sequencing of
actions. If you’re more comfortable with <code>do</code> notation, you can also
write the above as</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnHaskell ::</span> <span class="dt">X</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>spawnHaskell <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  sendMessage (<span class="dt">JumpToLayout</span> <span class="st">&quot;Hacking&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  spawnEditorInTopic</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  executeInTopic <span class="st">&quot;ghcid&quot;</span></span></code></pre></div>
<p>Furthermore, since the associated directory for a topic can easily be
made <code>$HOME</code> by default (as we’ve seen, TopicSpace even exports the
<code>inHome</code> function), spawning programs in certain topics can easily be
made to replace the default keybindings!</p>
<p>For the sake of completeness, I will showcase one slightly more
complicated example. My main shell environment is <code>eshell</code> and getting
sane behaviour there presents one with a few more obstacles than
<code>spawnTermInTopic</code> did. It also uses <code>inProgram</code> instead of <code>inEditor</code>,
allowing access to a different instance of the Emacs server.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- | Spawn an eshell frame in the current topic directory.</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnEshellInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>spawnEshellInTopic <span class="ot">=</span> currentTopicDir topicConfig <span class="op">&gt;&gt;=</span> \dir <span class="ot">-&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  proc <span class="op">$</span> inProgram <span class="st">&quot;emacsclient -a '' -c -s eshell&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>     <span class="op">&gt;-&gt;</span> execute (progn [ <span class="st">&quot;eshell&quot;</span> <span class="op">&lt;&gt;</span> quote <span class="st">&quot;new-shell&quot;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/cd&quot;</span> <span class="op">&lt;&gt;</span> asString dir</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell/clear-scrollback&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                        , <span class="st">&quot;eshell-send-input&quot;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                        ])</span></code></pre></div>
<p>All in all, we have something that looks a little bit like this:</p>
<p><img class="pure-img" src="./haskell-topic.gif"></p>
<h2 id="testing-this-website">Testing this website</h2>
<p>Much in the same vein as my Haskell topics, I find the <code>website</code> topic
to be extremely handy—you can probably guess what it’s used for. Its
associated function <code>spawnWebsite</code> switches to the “Tall” layout, spawns
an Emacs frame in the topic directory, builds the website, and opens a
browser window pointing to the local copy:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">spawnWebsite ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>spawnWebsite <span class="ot">=</span> switchToLayout <span class="st">&quot;Tall&quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawnEditorInTopic</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> executeInTopic <span class="st">&quot;hakyll-build.sh --hold&quot;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">*&gt;</span> spawn <span class="st">&quot;browser-new-window.sh localhost:8000&quot;</span></span></code></pre></div>
<p>The whole thing looks like this:</p>
<p><img class="pure-img" src="./website.gif"></p>
<h1 id="conclusion">Conclusion</h1>
<p>Hopefully these examples have convinced you to give TopicSpace a spin;
perhaps you’ve even gotten some ideas of your own you’d like to try out.
Although conceptually very simple, the module can be used in a variety
of ways to automate boring tasks just that tiny bit more—definitely a
win in my book!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In case you are interested:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>hacking <span class="ot">=</span> renamed [<span class="dt">Replace</span> <span class="st">&quot;Hacking&quot;</span>]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span> limitWindows <span class="dv">3</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span> magnify <span class="fl">1.3</span> (<span class="dt">NoMaster</span> <span class="dv">3</span>) <span class="dt">True</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="op">$</span> <span class="dt">ResizableTall</span> <span class="dv">1</span> (<span class="dv">3</span> <span class="op">%</span> <span class="dv">100</span>) (<span class="dv">13</span> <span class="op">%</span> <span class="dv">25</span>) []</span></code></pre></div>
<p>As with the rest of my dotfiles, it’s available <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L341">here</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Rapidly Capture Ideas with XMonad and Emacs</title>
    <link href="https://tony-zorman.com/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html" />
    <id>https://tony-zorman.com/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html</id>
    <published>2022-08-27T00:00:00Z</published>
    <updated>2022-08-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-08-27
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html">xmonad</a>
      
    </section>
    <section>
        <p>As I’ve said before, basically my entire digital life happens in either
<a href="https://www.gnu.org/software/emacs/">Emacs</a> or <a href="https://xmonad.org/">XMonad</a>. Thus, a lot of time spent on my setup either goes
towards working on the two configurations separately, or—as we’ll do
today—bringing them ever closed together.</p>
<p>Specifically, I want to showcase a new<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> XMonad module:
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.Prompt.OrgMode</a>. Building on top of XMonad’s prompt—which works
much like <a href="https://tools.suckless.org/dmenu/">dmenu</a>—it is designed to rapidly capture thoughts and ideas
whenever inspiration strikes and, importantly, to do so without
disrupting one’s current workflow. The module recently got support for
Org <a href="https://orgmode.org/manual/Priorities.html">priorities</a>, so I figured this was as good an excuse as
any to talk about it.</p>
<!--more-->
<h2 id="motivation">Motivation</h2>
<p>One theme in the post about my <a href="../phd-workflow/2022-05-01-my-phd-workflow.html">research workflow</a> was how it’s possible
to use org-mode (with all of its appendages, like <a href="https://www.orgroam.com/">org-roam</a>) to
organise one’s thoughts. <code>XMonad.Prompt.OrgMode</code> was created as yet
another link in that chain. Unlike when writing tiny <a href="../2022-05-25-calling-emacs-from-xmonad.html">Emacs Lisp
scripts in XMonad</a>, this does not involve any
custom elisp code one has to run; all of it is taken care of by the
module itself.</p>
<p>The upshot of all of this is a tool to quickly and unobtrusively jot
down an idea—quiet the monkey mind—and then get back to work straight
away. For me, having something like this is very important, lest I get
distracted by some thought about another project and spend the next hour
or so working on that instead of doing what I was actually supposed to
do. Having the idea written down in a known place—perhaps even with an
automatic reminder in my <a href="https://orgmode.org/manual/Agenda-Views.html">agenda</a>—helps me get rid of that creeping
anxiety that I’m forgetting things left and right.</p>
<h2 id="functionality">Functionality</h2>
<p>The following showcases the core functionality of the module—taking
notes!</p>
<p><img class="pure-img" src="./simple-task.gif"></p>
<p>In case you <em>really</em> don’t want to forget something, there is also the
ability to create <code>DEADLINE</code> and <code>SCHEDULED</code> tasks. Optionally, you can
also specify a <a href="https://orgmode.org/manual/Priorities.html">priority</a>, depending on the importance of the note. If
you add the org file in which the TODOs are placed to the
<code>org-agenda-files</code> variable, then this will immediately show these tasks
in your agenda!</p>
<p><img class="pure-img" src="./deadline-task.gif"></p>
<p>How exactly one may specify the <code>SCHEDULED</code> and <code>DEADLINE</code> keywords, as
well as a date, time, and priority is covered in detail in the
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">documentation</a> for <code>X.P.OrgMode</code>.</p>
<p>Last but not least, it’s possible to capture the current (primary)
selection and, depending on the type of thing in it, use that as either
the body or the header of the task. If it’s a URL, create a link (i.e.,
it will be of the form <code>[[link][input-text]]</code>); if not, just add the
selection to the body of the note.</p>
<p><img class="pure-img" src="selection-tasks.png"></p>
<p>Of course, you can use all of this together as well—directly link to
that one paper or blog post you wanted to read, or that one YouTube
video you want to watch on the weekend!</p>
<h2 id="sample-configuration">Sample Configuration</h2>
<p>To round things off—and quickly showcase another cool (and new!)
module, <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Actions-Prefix.html">XMonad.Actions.Prefix</a>—here is a sample keybinding that takes
“normal” TODO notes on <code>M-o c</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and uses the selection when called
with a universal argument:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- uses {-# LANGUAGE LambdaCase #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">orgKey ::</span> (<span class="dt">String</span>, <span class="dt">X</span> ())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>orgKey <span class="ot">=</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-o c&quot;</span>, withPrefixArgument <span class="op">$</span> (<span class="ot">`uncurry`</span> orgSettings) <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> orgPromptPrimary promptNoHist</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     _     <span class="ot">-&gt;</span> orgPrompt        promptNoHist)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  orgSettings <span class="ot">=</span> (<span class="st">&quot;TODO&quot;</span>, <span class="st">&quot;~/todos.org&quot;</span>)</span></code></pre></div>
<p>I’ve found <code>M-u</code> to be quite convenient for XMonad’s universal argument
key, mirroring the <code>C-u</code> convention from Emacs. In either case, simply
add the <code>usePrefixArgument</code> combinator somewhere to your <code>main</code> function
and give it your preferred keybinding. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> xmonad</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span> usePrefixArgument <span class="st">&quot;M-u&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">$</span> def{ modMask <span class="ot">=</span> mod4Mask  <span class="co">-- use &lt;Super&gt; as mod</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          }</span></code></pre></div>
<p>If you’re anything like me, this will soon become an integral part of
your workflow and you won’t want to live without it. If not, then
perhaps you still don’t understand what all the fuss is about; in either
case, I’d like to <a href="mailto:soliditsallgood@mailbox.org">hear from you</a>!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>In version <code>0.17.0</code>, though new features are coming for <code>0.17.1</code>,
which will drop soon!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Note that for this post, <code>M</code> means <code>&lt;Super_L&gt;</code> and not <code>&lt;Alt_L&gt;</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>How to query-replace multiple matches!</title>
    <link href="https://tony-zorman.com/posts/query-replace/2022-08-06-query-replace-many.html" />
    <id>https://tony-zorman.com/posts/query-replace/2022-08-06-query-replace-many.html</id>
    <published>2022-08-06T00:00:00Z</published>
    <updated>2022-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-08-06
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>
      
    </section>
    <section>
        
<p>As its name suggests, Emacs’s <code>query-replace</code> function (bound to <code>M-%</code>
by default) can be used to replace occurences of one string with
another. In comparison to other tools that are used for similar
purposes—(a subset of) keyboard macros and multiple-cursors—the whole
process after entering the <code>from</code> and <code>to</code> strings is interactive all
the way through: it’s very fast to step through the individual matches
and decide on the spot whether one would like to replace them or not.
Needless to say, I like <code>query-replace</code> a lot! In true Emacs fashion,
the function also takes way too many arguments: among other things, it
can operate on the current region, backwards, or only on things
surrounded by words boundaries.</p>
<p>However, there is one crucial feature missing from its default
functionality: the ability to create multiple <code>from → to</code> pairs. But
this is Emacs, after all, which means that I can just write that
<code>query-replace-many</code> function I’ve always wanted!</p>
<!--more-->
<h1 id="motivation">Motivation</h1>
<p>Originally, my motivation came through <a href="../../research.html">work</a>, where I <a href="../phd-workflow/2022-05-01-my-phd-workflow.html">write a lot of
LaTeX</a>. When polishing papers, it sometimes happens that I would like
to change or unify the notation of certain objects in the current
equation/environment/file.</p>
<p>When an alteration like this only encompasses a single action, like
switching <code>T</code> to <code>H</code>, a simple <code>query-replace</code> after narrowing to the
current region of interest is totally sufficient. For others, like
changing <code>T</code> to <code>H</code> <em>and</em> <code>S</code> to <code>G</code>, this solution, along with
multiple-cursors and other tools people usually go for, would already be
unsatisfactory—the whole region would need to be traversed twice. Now
imagine that you want to change <code>T</code> to <code>U</code> <em>and</em> <code>U</code> to <code>T</code>: chaos!
Save having to give some sort of temporary name to one of the objects,
which would be even slower, <code>query-replace</code> is quite useless in this
situation. It’s possible to cook up a manual solution using the
alternative <code>query-replace-regexp</code> function and capture groups, but I’m
unsure how many people know their elisp regular expressions well enough
for that to be time efficient. I don’t, and almost certainly never
will, so it seemed much easier to automate this instead!</p>
<h1 id="the-solution">The Solution</h1>
<p>Thankfully, since <code>replace.el</code> sports a decent API, writing a version of
<code>query-replace</code> that accepts multiple arguments turns out to be easy
enough. The high-level overview is this: we read in multiple queries
until an empty input is given<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, build up a regular expression of the
form <code>"\\(?:query-1\\|query-2\\|…\\)"</code>, and—when it comes to
replacing—test the current thing to be replaced against all of the
queries to select the correct one.</p>
<p>The beauty of this is that, since it’s really just a thin wrapper over
two functions from <code>replace.el</code> that do the heavy lifting, all of the
modules regular functionality, like the keybindings and history, just
work.</p>
<p>For example, in the following I replace <code>T</code> with <code>U</code> and, at the same
time, <code>U</code> with <code>T</code>. The first few matches are stepped through and the
rest is just accepted wholesale. At the bottom, you can see the default
<code>query-replace</code> interface when interacting with the query.</p>
<p><img class="pure-img" src="./query-replace-many.gif"></p>
<p>The only cosmetic imperfection of this is that, while the replacement
candidate itself is correctly updated, we see the whole regular
expression <code>\(?U:\|T\)</code> as the thing to be replaced instead of the bit
that’s actually matching currently. However, since this would seem to
require some work and one of course sees what’s to be replaced by
looking at the thing at point, I can very much live with this for the
moment.</p>
<h2 id="the-code">The Code</h2>
<p>Below is the full source code, in all of its hacky glory. Note that you
will need to <code>require</code> the <code>s.el</code> and <code>dash.el</code> libraries for this to
work, if you haven’t loaded these already (if you use any amount of
packages at all, chances are that you have).</p>
<!-- pandoc does not support emacs-lisp :< -->
<div class="sourceCode" id="cb1"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/get-queries </span>(&amp;optional pairs)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get multiple `query-replace' pairs from the user.</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="st">PAIRS is a list of replacement pairs of the form (FROM . TO).&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (-let* (((from to delim arg)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>           (query-replace-read-args</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            (s-join <span class="st">&quot; &quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                    (-non-nil</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">list</span> <span class="st">&quot;Query replace many&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                           (<span class="kw">cond</span> ((<span class="kw">eq</span> current-prefix-arg '-) <span class="st">&quot;backward&quot;</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>                                 (current-prefix-arg         <span class="st">&quot;word&quot;</span>))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>                           (<span class="kw">when</span> (use-region-p) <span class="st">&quot;in region&quot;</span>))))</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">nil</span>))                       <span class="co">; no regexp-flag</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>          (from-to (<span class="kw">cons</span> (regexp-quote from)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                         (s-replace <span class="st">&quot;</span><span class="sc">\\</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="sc">\\\\</span><span class="st">&quot;</span> to))))</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; </span><span class="al">HACK</span><span class="co">: Since the default suggestion of replace.el will be</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; the last one we've entered, an empty string will give us</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; exactly that.  Instead of trying to fight against this,</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; use it in order to signal an exit.</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (-contains? pairs from-to)</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">list</span> pairs delim arg)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>      (slot/get-queries (<span class="kw">push</span> from-to pairs)))))</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/query-replace-many</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    (pairs &amp;optional delimited start end backward region-noncontiguous-p)</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Like `query-replace', but query for several replacements.</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="st">Query for replacement pairs until the users enters an empty</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="st">string (but see `slot/get-queries').</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="st">Refer to `query-replace' and `perform-replace' for what the other</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="st">arguments actually mean.&quot;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>  (interactive</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">let</span> ((common (slot/get-queries)))</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">list</span> (<span class="kw">nth</span> <span class="dv">0</span> common) (<span class="kw">nth</span> <span class="dv">1</span> common)</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">if</span> (use-region-p) (region-beginning))</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">if</span> (use-region-p) (region-end))</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">nth</span> <span class="dv">2</span> common)</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">if</span> (use-region-p) (region-noncontiguous-p)))))</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>  (perform-replace</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>   (concat <span class="st">&quot;</span><span class="sc">\\</span><span class="st">(?:&quot;</span> (mapconcat #'car pairs <span class="st">&quot;</span><span class="sc">\\</span><span class="st">|&quot;</span>) <span class="st">&quot;</span><span class="sc">\\</span><span class="st">)&quot;</span>) <span class="co">; build query</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">cons</span> (<span class="kw">lambda</span> (pairs _count)</span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>           (cl-loop for (from . to) in pairs</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">when</span> (string-match from (match-string <span class="dv">0</span>))</span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> to))</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>         pairs)</span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>   :query :regexp</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>   delimited <span class="kw">nil</span> <span class="kw">nil</span> start end backward region-noncontiguous-p))</span></code></pre></div>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>This isn’t <em>quite</em> what’s actually done, but it’s the right mental
model to have (since this is how the function behaves). The gory
details are that we use the fact that <code>replace.el</code>’s default
suggestion is always the last query that was entered by the user.
What happens on an empty input is quite deep in the bowels of
<code>query-replace-read-from</code>. Since replacing these massive internal
functions sounds like a real pain, leaning on that functionality
suddenly appears much more reasonable. Thus, when we get back a
query that has already been entered in one way or another, we bail
out.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Calling Emacs from XMonad</title>
    <link href="https://tony-zorman.com/posts/2022-05-25-calling-emacs-from-xmonad.html" />
    <id>https://tony-zorman.com/posts/2022-05-25-calling-emacs-from-xmonad.html</id>
    <published>2022-05-25T00:00:00Z</published>
    <updated>2022-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-05-25
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html">xmonad</a>
      
    </section>
    <section>
        
<p>In the post about my <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">research workflow</a>, I briefly mentioned having to
call Emacs—or other external programs—from within XMonad. I figured
that this was perhaps something that could be of use to more people than
just me. After a little bit of deliberation and coming up with a
generic enough API, I decided to turn it into an XMonad module!</p>
<p>Yesterday these changes were merged into the <a href="https://github.com/xmonad/xmonad-contrib">xmonad-contrib</a> repository
and they are now available for everyone to try out; provided one has the
git version of XMonad <a href="https://xmonad.org/INSTALL.html">installed</a>.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>I’d like to use this opportunity to both showcase the module—how and why
one would use it—and talk a little bit about its only redeeming
implementation detail.</p>
<!--more-->
<h1 id="main-use-cases">Main Use Cases</h1>
<p>Wouldn’t it be neat to have some kind of <a href="https://en.wikipedia.org/wiki/Domain-specific_language">EDSL</a> for spawning external
processes? Something where one can just compose Haskell functions
together, not having to worry about the actual underlying string
manipulations? Something that’s composable, so that one does not have
to write the same <code>"emacsclient -c -a '' …"</code> or <code>"alacritty --working-directory …"</code> prefix over and over again? Well, at least
that’s what I thought on some rainy afternoon a few months ago.</p>
<h2 id="scratchpads">Scratchpads</h2>
<p>The first use case that I came up with was <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpad</a>s. The idea of
these things is very simple: while we normally don’t like floating
windows, it’s quite convenient to have some of them around that one can
bring to the current workspace, as well as hide, with a single
keybinding. This is very useful for things like email, a calendar, a
daily agenda, a calculator, etc.</p>
<p>For scratchpads to work reliably, windows need to have some unique
characteristic they can be recognised by, like a special <a href="https://tronche.com/gui/x/icccm/sec-4.html#WM_CLASS">class or
instance name</a>. Endowing an application with additional properties
sounds exactly like what our EDSL should be good at, so let’s try that!</p>
<p>Using the new features of <code>XMonad.Util.Run</code>, we could spawn an Emacs
frame with a special name for our scratchpad hooks to grab onto, and
execute <code>notmuch</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  mailSession ::</span> <span class="dt">X</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  mailSession <span class="ot">=</span> getInput <span class="op">$</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInstName</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>             <span class="op">&gt;-&gt;</span> eval (function <span class="st">&quot;notmuch&quot;</span>)</span></code></pre></div>
<p>You can read the <code>&gt;-&gt;</code> operator a little like a pipe, where you start
with what you want and thread that information through to the end: “I
want an editor with a certain frame name that also starts up notmuch”.</p>
<p>In full, the above function would produce the string (broken into a few
lines for better readability)</p>
<pre><code>  &quot;emacsclient -c -a ''
               -F '(quote (name . \&quot;notmuch-scratch\&quot;))'
               --eval '(notmuch)'&quot;</code></pre>
<p>which would be quite bothersome to type indeed.</p>
<p>Because the type of <code>mailSession</code> is <code>X String</code> and not just <code>String</code>,
the setup for this is a little bit different than usual when using
scratchpads. You would use it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  myScratchpads ::</span> <span class="dt">X</span> [<span class="dt">NamedScratchpad</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  myScratchpads <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- First, get the finished string.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    mailSession <span class="ot">&lt;-</span> getInput <span class="op">$</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInst <span class="op">&gt;-&gt;</span> eval (elispFun <span class="st">&quot;notmuch&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Now we can insert it into our scratchpads as normal.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> [ <span class="dt">NS</span> <span class="st">&quot;Mail&quot;</span> mailSession (appName <span class="op">=?</span> mailInst) quake ]</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    mailInst <span class="ot">=</span> <span class="st">&quot;notmuch-scratch&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    quake    <span class="ot">=</span> customFloating <span class="op">$</span> <span class="dt">RationalRect</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="dv">4</span> <span class="op">/</span> <span class="dv">5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- The call to @namedScratchpadManageHook@ in the manageHook also</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- needs to be slightly adjusted.</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ot">  myManageHook ::</span> <span class="dt">ManageHook</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  myManageHook <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    [ …</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    , namedScratchpadManageHook <span class="op">=&lt;&lt;</span> liftX myScratchpads</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>Normally you would also add your <code>myScratchpads</code> list to all calls of
<code>namedScratchpadAction</code>; e.g., when you define the keys to call your
scratchpads. However, since the former lives in <code>X</code> now, this doesn’t
work anymore! Thankfully,
<a href="https://github.com/xmonad/xmonad-contrib/commit/3fc830aa09368dca04df24bf7ec4ac817f2de479">nowadays</a>
the first argument to <code>namedScratchpadAction</code> is actually unused and
only there for backwards compatibility. This means that it’s not
necessary to enter your scratchpads there at all if they are added to
your <code>manageHook</code>. For example, in the following I just provide the empty list:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-C-t&quot;</span>, namedScratchpadAction [] <span class="st">&quot;Mail&quot;</span>)</span></code></pre></div>
<p>This works all the same with the above definition of <code>myScratchpads</code>.</p>
<p>A full example of how a scratchpad setup would look using this machinery
can be found in <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L414">my config</a>.</p>
<h2 id="calling-emacs-in-scripts">Calling Emacs in Scripts</h2>
<p>Spawning frames is nice and all, but how about something more
complicated, like Emacs’s batch mode so that we can use it properly in
scripts? No problem at all!</p>
<p>For example, I have the following snippet in my config to get the
currently selected text and call <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> with it to <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">produce a
citation entry in my bibliography
files</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  callArXiv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  callArXiv fun <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    url <span class="ot">&lt;-</span> getSelection  <span class="co">-- from X.U.XSelection</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    proc <span class="op">$</span> inEmacs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>       <span class="op">&gt;-&gt;</span> withEmacsLibs [ <span class="dt">ElpaLib</span> <span class="st">&quot;dash&quot;</span>, <span class="dt">ElpaLib</span> <span class="st">&quot;s&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                         , <span class="dt">ElpaLib</span> <span class="st">&quot;arxiv-citation&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                         , <span class="dt">Special</span> <span class="st">&quot;~/.config/emacs/private-stuff.el&quot;</span> ]</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>       <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>       <span class="op">&gt;-&gt;</span> eval (progn [require <span class="st">&quot;arxiv-citation&quot;</span>, fun <span class="op">&lt;&gt;</span> asString url])</span></code></pre></div>
<p>When executed, this translates to something like</p>
<pre><code>  emacs -L /home/slot/.config/emacs/elpa/dash-20220417.2250
        -L /home/slot/.config/emacs/elpa/s-20210616.619
        -L /home/slot/.config/emacs/elpa/arxiv-citation-20220510.1137/
        --batch
        --eval '(progn
                  (require (quote arxiv-citation))
                  (arXiv-citation &quot;&lt;url-in-the-primary-selection&gt;&quot;))'</code></pre>
<p>I certainly know which one I’d rather type—especially with ELPA
directory names changing quite frequently! On that note,
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> is on MELPA now; yay!</p>
<h2 id="other-programs">Other Programs</h2>
<p>As this is my main use case for it, the new features of
<code>XMonad.Util.Run</code> are quite specialised for Emacs. However, even for
other programs they may well come in handy. Drawing from the point
about scratchpads again, here is a hypothetical one that spawns a ghci
session:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  ghci <span class="ot">&lt;-</span> proc <span class="op">$</span> inTerm <span class="op">&gt;-&gt;</span> setXClass calcInstName <span class="op">&gt;-&gt;</span> execute <span class="st">&quot;ghci&quot;</span></span></code></pre></div>
<p>Further, something that’s very useful when dealing with <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#topics">topic-based
workspaces</a>
is spawning a terminal or an editor already in the current topic
directory:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">import</span> <span class="dt">XMonad.Actions.TopicSpace</span>  <span class="co">-- for currentTopicDir and more</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  topicConfig <span class="ot">=</span> …</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  spawnTermInTopic <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Optionally, modify the path to the editor with a function.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">  spawnEditorInTopic ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  spawnEditorInTopic with <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> with <span class="op">&lt;$&gt;</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Quite convenient if you ask me.</p>
<p>If you have or know of a use case you would like to support but which is
awkward with the current set of functions and combinators do not
hesitate to open a pull request or an issue!</p>
<h1 id="implementation-considerations">Implementation Considerations</h1>
<p>The implementation is actually very straightforward—no really, check out
the
<a href="https://github.com/xmonad/xmonad-contrib/blob/master/XMonad/Util/Run.hs#L303">source</a>
if you don’t believe me!</p>
<p>One concept that’s still worth touching upon is the internal use of
<a href="https://github.com/spl/dlist#references">difference list</a>s. The basic idea of these things is that, instead of
concatenating strings one by one, we create functions <code>String -&gt; String</code>
and then use function composition to do the work for us:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Ordinary string concatenation</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Using difference lists:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  string1, string2, string3,<span class="ot"> string4 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  string1 s <span class="ot">=</span> <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  string2 s <span class="ot">=</span> …</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Note how we have to apply the entire thing to <code>""</code> at the end in order
to actually get a string back. As a concrete example, assuming we have
set <code>"Emacs"</code> as our editor, the <code>inEditor</code> function would essentially
be</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  inEditor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  inEditor s <span class="ot">=</span> <span class="st">&quot; Emacs &quot;</span> <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>There are some further considerations to be made, since we are in the
<code>X</code> monad and thus the type is actually <code>X (String -&gt; String)</code> instead
of just <code>String -&gt; String</code>, but that isn’t too important for us here.</p>
<p>Difference lists have some performance advantages over the traditional
concatenation of strings. The concatenation <code>(&lt;&gt;)</code> on strings is left
associative by default and so</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  ≡ ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>However, the complexity characteristics of this operation are working
against us here; the definition of <code>(&lt;&gt;)</code> on <code>String</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> is</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&lt;&gt;) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  []       <span class="op">&lt;&gt;</span> ys <span class="ot">=</span>           ys</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  (x <span class="op">:</span> xs) <span class="op">&lt;&gt;</span> ys <span class="ot">=</span> x <span class="op">:</span> xs <span class="op">&lt;&gt;</span> ys</span></code></pre></div>
<p>We are merely traversing the first string, leaving the second one
completely untouched (and unevaluated!). All in all, this means that
<code>s₁ &lt;&gt; s₂</code> is in <code>𝓞(|s₁|)</code>; given an expression of the form</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>we will have to walk over <code>"string1"</code> three times! What we actually
want is a right-associative ordering—exactly what function compositions
gives us. Spelled out,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 (string2 (string3 (string4 <span class="st">&quot;&quot;</span>)))</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  ≡ <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string4&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>which yields the desired behaviour. In fact, this is so canonical that
instead of using <code>(.)</code>, we could have also—perhaps a bit
confusingly—used <code>(&lt;&gt;)</code> directly:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    string1  <span class="op">.</span> string2  <span class="op">.</span> string3  <span class="op">.</span> string4</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 <span class="op">&lt;&gt;</span> string2 <span class="op">&lt;&gt;</span> string3 <span class="op">&lt;&gt;</span> string4</span></code></pre></div>
<p>This is the fact that the <em>endomorphisms</em> for any type <code>a</code>—the functions
<code>a -&gt; a</code>—form a <em>monoid</em>. That is to say that they come equipped with
an associative an unital operation: function composition. In Haskell,
<code>(&lt;&gt;)</code> is, in some sense,
<a href="https://www.haskell.org/tutorial/classes.html">overloaded</a> so that it
can be used with any monoidal composition one can think of!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>The attentive reader may have concluded that the pipe operator that we
called <code>(&gt;-&gt;)</code> above is really just <code>(&lt;&gt;)</code> in disguise, and that’s
exactly right! I, however, thought that for people not familiar with
Haskell, giving it a pipe-like appearance would be more conceptually
amenable to the threading idea.</p>
<p>I haven’t benchmarked this, so it’s not entirely clear to me whether
performance is actually relevant in this situation,<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> but using
difference lists just feels right here, and so I did.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I have to say that I’m quite satisfied with this API. In fact, if I
look at the old code that only resided within my personal config, it’s
even a bit more ergonomic in a few places, despite having essentially no
user-specific strings hardcoded anywhere! As I said before, if you try
this and find something missing, do let me know and we’ll probably find
a solution! If you try this and find it useful, also let me know :)</p>
<p>Of course, technically none of this needs to live only inside your
XMonad config at all. In combination with the excellent <a href="https://hackage.haskell.org/package/turtle">turtle</a>
library, I reckon it would be quite easy to produce Haskell versions of
cool tools like magit.sh<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>. Go nuts!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you <em>really</em> want to try this feature but don’t want to bother
installing any unreleased—though stable—version, message me in any
way and maybe we’ll hurry up and cut 0.17.1 soon!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Really, this is the definition of <code>(++)</code> for arbitrary lists <code>[a]</code>
and <code>(&lt;&gt;) = (++)</code> for <code>String = [Char]</code>, but let’s not get into
that here.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Really, for any <em>semigroup</em>, which is a slightly weaker notion of
an operation that is merely associative, but doesn’t necessarily
have a unit.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>I suspect that the answer is “probably not”—that didn’t stop me,
however!<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Available <a href="https://github.com/alphapapa/magit.sh">here</a>. I also
maintain a slightly modified and POSIX shell compatible version
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/scripts/.scripts/magit.sh">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>My PhD Research Workflow</title>
    <link href="https://tony-zorman.com/posts/phd-workflow/2022-05-01-my-phd-workflow.html" />
    <id>https://tony-zorman.com/posts/phd-workflow/2022-05-01-my-phd-workflow.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2022-05-01
      
        | <a title="All pages tagged 'emacs'." href="/tags/emacs.html">emacs</a>, <a title="All pages tagged 'maths'." href="/tags/maths.html">maths</a>, <a title="All pages tagged 'xmonad'." href="/tags/xmonad.html">xmonad</a>
      
    </section>
    <section>
        
<p>After reading <a href="https://castel.dev/post/research-workflow/">Gilles Castel</a>’s excellent blog post about his research
workflow, I decided that it was as good a time as any to write about
mine—deeming it novel enough to hopefully contribute something to the
discussion.</p>
<p>Just like Castel, I’m a new PhD student in mathematics, which means no
lab work and—in my case—no code. Just you and your inability to
understand basic concepts. As such, I often scribble things down on
paper or a blackboard first and, when sufficiently convinced that the
information is worth keeping around, type it up. Typesetting something
is a surprisingly effective way to catch errors in handwritten
manuscripts!</p>
<p>As basically my entire digital life happens in either <a href="https://www.gnu.org/software/emacs/">Emacs</a> or
<a href="https://xmonad.org/">XMonad</a>, my setup is very heavily skewed in that direction; I will make
use of these tools almost every step of the way.
<!--more-->
As such, there is a lot of tangential almost relevant bits that I could
cover here. However, since these aren’t directly related to my
<em>research</em> workflow—and there is a lot of great resources out there
already—I decided to not do this here.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h1 id="high-level-structure">High Level Structure</h1>
<h2 id="topics">Topics</h2>
<p>XMonad has a module called <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/xmonad-actions-topicspace.html">TopicSpace</a>, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results in
a very clean separation of concerns. Plus, I always know where my
windows are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the topic
is switched to and empty, associated to it. While most convenient for
programming related tasks—e.g., spawn <code>ghcid</code> in the relevant directory
or automatically build and open this website—it’s also quite convenient
for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is done
fuzzily via the XMonad prompt, which means I only have to type a few
characters to get to my destination. This makes it feasible to have 30
topics, instead of the usual 9 or so, in the first place. As a result,
it’s rather fast to go from thinking about a certain problem to working
on it. When I’m already inside a project, I leverage Emacs’s built-in
<code>project.el</code> library to search through files and the like.</p>
<p><img class="pure-img" src="./topics.gif"></p>
<h2 id="files">Files</h2>
<p>Here I keep things relatively simple; I have a big “library” directory
in which essentially all books or papers that I’ve ever read reside.
This may sound a bit chaotic, but since I never interact with this
as-a-directory it is actually the easiest and cleanest solution for me.</p>
<p>To keep a bit of order, all files are named in a consistent and
descriptive way: <code>authors_title.pdf</code>, where <code>authors</code> is a list of last
names of all authors separated by hyphens and <code>title</code> is the title of
the work, also separated by hyphens. For example:</p>
<pre><code>    pastro-street_double-of-a-monoidal-category.pdf</code></pre>
<p>Also in this directory are <code>.xopp</code> files, when I scribble on the
relevant PDFs in <a href="https://xournalpp.github.io/">xournalpp</a>; more on that later.</p>
<p>Instead of navigating to it, all interaction with the library is done
via <a href="https://github.com/slotthe/hmenu">hmenu</a>, a small wrapper around <a href="https://tools.suckless.org/dmenu/">dmenu</a> to facilitate this kind of
behaviour. I merely have to press <code>M-y</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and can then fuzzy search
through the directory. Once I’ve made a choice, PDFs are automatically
opened in <a href="https://pwmt.org/projects/zathura/">zathura</a> and <code>.xopp</code> files are opened in xournalpp.</p>
<p><img class="pure-img" src="./hmenu.gif"></p>
<p>My bibliography is organised in a similar spirit; see
<a href="#citations">Citations</a>.</p>
<h1 id="note-taking">Note Taking</h1>
<h2 id="handwritten-notes">Handwritten Notes</h2>
<p>For handwritten notes I… use real paper! A little elaboration is
probably in order, having talked about <code>.xopp</code> files and xournalpp
above. I do have a Wacom tablet lying around and I’m quite happy
annotating PDFs with it. In lieu of printing everything out, this
alleviates a little bit of the usual pain with reading papers, like
coming back to one three weeks later and getting stuck on the same
calculation as last time. I do love those annotations!</p>
<p>However, there is just something deeply psychologically pleasing about
ordinary pen and paper—nothing beats drawing up the first version of
many ideas there. It’s a very “pure” experience: there’s no noise or
distractions, nothing that could break, no additional layer of
abstraction between you and the maths. Chalkboards—but not whiteboards,
with their ever empty markers—fall into this category as well,
especially when collaborating with others.</p>
<p>Not without my quirks (as I’m sure you’ve noticed), I’m a bit picky
about the particular writing setup. It’s either completely white A5<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
paper, paired with a good (mechanical) pencil/a very fine pen, or very
thick dotted paper, paired with a fountain pen.</p>
<p>Quite enjoying the experience, I tend to write quite a lot of
manuscripts by hand first. Of course, anything that’s supposed to be
permanent should be typed up properly!</p>
<h2 id="digital-notes">Digital Notes</h2>
<p>Not wanting to go insane, I use LaTeX for all of my digital digital note
taking. My writing setup for <code>.tex</code> files is pretty similar to <a href="https://karthinks.com/software/latex-input-for-impatient-scholars/">Karthik
Chikmagalur</a>’s—whose excellent post you should definitely check out—so I
will not belabour the point too much here. The tl;dr is <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
<a href="https://github.com/cdominik/cdlatex">CDLaTeX</a>, and <a href="https://github.com/ymarco/auto-activating-snippets">aas</a>.</p>
<p><img class="pure-img" src="./input.gif"></p>
<p>In case you’re not used to <code>prettify-symbols-mode</code>: the inserted LaTeX
code was</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">definition</span>} <span class="kw">\label</span>{<span class="ex">def:day-convolution</span>}</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  The <span class="fu">\emph</span>{Day convolution} of two functors <span class="ss">$F$</span> and <span class="ss">$G$</span> is</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\[</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ss">    F * G </span><span class="sc">\defeq</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ss">      </span><span class="sc">\int</span><span class="ss">^{C,D </span><span class="sc">\in</span><span class="ss"> </span><span class="sc">\cc</span><span class="ss">} </span><span class="sc">\cc</span><span class="ss">(C </span><span class="sc">\otimes</span><span class="ss"> D, </span><span class="sc">\blank</span><span class="ss">) </span><span class="sc">\otimes</span><span class="ss"> FC </span><span class="sc">\otimes</span><span class="ss"> GD.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ss">  \]</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">definition</span>}</span></code></pre></div>
<p>I do use some smaller packages not mentioned in Chikmagalur’s article,
like <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> and <a href="https://github.com/slotthe/change-env">latex-change-env</a>. The former is for
quickly changing between inline and display math, complete with slurping
punctuation symbols into display math and barfing them out of inline
math. For example, “<code>$1 + 1$.</code>” becomes “<code>\[1 + 1.\]</code>” (with line
breaks) and back.</p>
<p>The <code>latex-change-env</code> package is for changing between different kinds
of environments, including display math, while offering to rename labels
across the project if necessary. When deleting a label from an
environment, it also remembers this for the session!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="./label-renaming.gif"></p>
<p>One very neat feature of AUCTeX that I find myself using more and more
often lately<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> is the in-buffer preview. Usually when writing a draft
I’m not that interested in how exactly something looks in the PDF—that
part comes later, believe me. In cases like these, just calling
<code>preview-buffer</code> is quite convenient and lets me use the screen real
estate that a PDF viewer would have taken up for something else.</p>
<p><img class="pure-img" src="./preview.gif"></p>
<p>I always use pure LaTeX for writing papers, drafts, or presentations.
However, I also take lots of notes in <a href="https://orgmode.org/">org-mode</a>, which, as a crude
first approximation, is something like a markup language that’s <em>very</em>
well integrated into Emacs.</p>
<p>For the actual note-taking, I use the venerable <a href="https://www.orgroam.com/">org-roam</a>—a free
software alternative to the proprietary Roam Research program—to jot
down things that I’d like to remember for more than three days.
Org-roam describes itself as a “plain-text personal knowledge management
system”, which fits the bill pretty well. In short, it’s a note taking
system in the spirit of the <a href="https://en.wikipedia.org/wiki/zettelkasten">Zettelkasten</a> method, which is essentially
about having lots of notes with lots of backlinks to related concepts:</p>
<p><img class="pure-img" src="./backlinks.png"></p>
<p>In fact, using <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>, one can even visualise the entire
Zettelkasten as an interactive and pretty graph in which notes become
nodes and backlinks become edges!</p>
<div class="pure-g">
<div class="pure-u-1-2">
<img class="pure-img" src="./org-roam-ui-close.png">
</div>
<div class="pure-u-1-2">
<img class="pure-img" src="./org-roam-ui-far.png">
</div>
</div>
<p>Org-roam <a href="https://github.com/org-roam/org-roam#configuration">suggests
keybindings</a> for all
of the most important concepts: creating notes, inserting them, showing
all of the backlinks of a file, etc. An important extra that I’ve added
is having two “types” of notes: <code>reference</code>s, where things that I
learned but are otherwise known reside, and <code>novel</code>s, where I put my own
ideas.</p>
<p>As I’m predisposed to quite easily forget details, I regularly engage
with my Zettelkasten, so as to keep things fresh in my mind. Reading
through all of the notes that are relevant to what I’m currently working
on, creating new backlinks, filling in gaps, even deleting old
information and re-organising some local region of the graph. Indeed, I
tag every new entry as a <code>draft</code> until further notice, forcing me to go
back there especially. This results in pretty good recollection of the
most important facts, even with my brain.</p>
<h1 id="staying-up-to-date">Staying Up To Date</h1>
<p>I use <a href="https://github.com/skeeto/elfeed">elfeed</a> to query the <a href="https://arxiv.org/">arXiv</a> for new preprints that are of
interest to me. Thankfully, the fields I’m subscribed to tend to be
moving slow-ish and so I can manage to at least read the abstract of
every paper that pops up in my feed. There is also <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/emacs/.config/emacs/lisp/rss.el#L61">a little bit of
elisp</a>
involved to print arXiv entries in a more readable way than the default
formatting.</p>
<p>When the abstract interests me, I usually directly download the paper
into my library and open it with zathura. This is fully automated via
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>—more on that later. I merely have to press <code>C-c d</code>
while looking at a paper and magic happens!</p>
<p><img class="pure-img" src="./elfeed.gif"></p>
<p>In the above gif, on the right-hand side you can see a score associated
to each entry. While reading every abstract has worked quite well for
me thus far, it’s nice to get the papers that are “probably interesting”
high up, so that I’m more likely to notice them sooner rather than
later. I use <a href="https://github.com/sp1ff/elfeed-score">elfeed-score</a> for this, which integrates seamlessly into
the rest of the machinery. It compares certain features of the entry
(like the title and abstract) with a list of regular expressions,
increasing the total score of the entry every time it matches something.</p>
<p>Speaking of the arXiv, in XMonad I have bound <code>M-s a</code> to look up the
given string there. Likewise, <a href="https://zbmath.org/">zbmath</a> is searched with <code>M-s z</code>. When
these commands get a “universal argument”—an Emacs concept that XMonad
borrowed—they automatically start a search with the current selection
instead. Briefly, pressing <code>M-u</code> before a command can modify it in
different ways. All of my search commands act on the <a href="https://www.jwz.org/doc/x-cut-and-paste.html">primary
selection</a> when given such an argument; <code>M-u M-s &lt;letter&gt;</code> will look up
the currently selected text on the relevant “search engine”. One
instance where this is very useful is for quickly switching between the
arXiv and zbmath:</p>
<p><img class="pure-img" src="./selected-search.gif"></p>
<h2 id="citations">Citations</h2>
<p>For citation management, I use a very simple system—no Zotero, JabRef,
or similar technology. Concretely, this means that I have a blessed
bibliography file somewhere within my home directory and I either
symlink (when I’m writing something alone) or copy (when working with at
least one coauthor) the file into the relevant project directory. In
case of a copy operation, I only have to update a single variable in
Emacs (<code>arxiv-citation-bibtex-files</code>), which is good enough for me and
doesn’t seem to warrant a slightly more automated, yet probably much
more complicated solution.</p>
<p>Adding new citations is done via the now aptly named Emacs package
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>, with <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/xmonad/.config/xmonad/src/xmonad.hs#L576">a bit of
plumbing</a>
on the XMonad side to get Emacs going. The basic idea is that—given an
arXiv or zbmath link—we first look up the paper on zbmath to see if it
was published and, if not, just use the arXiv data to construct our own
bibliography entry instead. By default, my keybinding for this acts on
the primary selection, so I merely have to highlight the link, press
<code>M-o a</code>, sit back, and enjoy the show. The following gif hopefully
helps drive home the point, also showcasing the format of a not yet
published paper and a published one.</p>
<p><img class="pure-img" src="./arXiv-citation.gif"></p>
<h1 id="final-thoughts">Final Thoughts</h1>
<p>And that’s it! If nothing else, this post helped me to nail down some
ideas that I had lying around and got me to finally clean up and publish
many of the extensions talked about here—that’s already a win in my
book.</p>
<p>I’m sure that some details will change over the course of the next three
years as I mature mathematically and my needs change, but overall I feel
pretty comfortable with this setup.</p>
<h4 id="addendum">Addendum</h4>
<p>Thanks to everyone who reached out! I received some inquiries as to my
configurations, so here are the most important bits again, for your
convenience:
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs/.config/emacs">my Emacs config</a>,
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/xmonad/.config/xmonad">my XMonad config</a>,
<a href="https://www.orgroam.com/">org-roam</a>, <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a>, <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>, <a href="https://github.com/slotthe/change-env">latex-change-env</a>,
<a href="https://github.com/slotthe/hmenu">hmenu</a>.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>If you’d like some examples: being employed at a university also
means I have to worry a bit about efficiently dealing with
bureaucracy (<a href="https://notmuchmail.org/">notmuch.el</a>), keeping some sort of up-to-date
calendar and readable todo-notes (<a href="https://orgmode.org/">org-mode</a> and goodies, as well
as integration via <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Prompt-OrgMode.html">XMonad’s OrgMode prompt</a>), accessing the
universities internal nextcloud server (<a href="https://gitlab.com/hperrey/khalel">khalel</a> and <code>davfs2</code> or
<code>TRAMP</code>), … You get the idea.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>I will be using Emacs style notation throughout the entire
article. This means that, for example, <code>C-x a</code> should be read as
“hold down control and press x, then release both and press a”.
You can of course safely ignore this, since the keys just serve
illustrative purposes. An important note for Emacs users, lest
anyone be confused: in XMonad, <code>M-</code> usually does not__ refer to
the Meta key, but to the <code>modMask</code> that the user specified. This
is indeed <code>&lt;Alt&gt;</code> by default, but many people understandably
rebind this straight away to something that’s less likely to
interfere with other programs. In my case, that’s the Super key,
so <code>M-s</code> means <code>&lt;Super&gt;-s</code> and not <code>&lt;Alt&gt;-s</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Although, admittedly, when drawing up very large diagrams I’m
sometimes forced to switch to A4 paper in landscape mode.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>This is based on the hash of the contents of the environment—if
that changes, the label is “lost”; though it can of course still
be retrieved manually from the relevant hash map.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>This is, in part, due to the new <code>pixel-scroll-precision-mode</code> in
Emacs 29, making use of XInput 2.4 functionality. It makes
scrolling through buffers that are quite dense with pictures
rather smooth.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>Ostensibly, this should be an XMonad module, as it does not
necessarily have anything to do with Emacs itself. However, I had
already written the elfeed integration and so the most annoying
part (scraping the arXiv xml for certain bits) was already done.
On the other hand, there are more Emacs than XMonad users, so
perhaps doing it like this will help more people anyways.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>

</feed>

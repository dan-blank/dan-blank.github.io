<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman – Blog</title>
    <link href="https://tony-zorman.com/atom.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom.xml</id>
    <author>
        <name>Tony Zorman</name>
        <email>tonyzorman@mailbox.org</email>
    </author>
    <updated>2022-08-27T00:00:00Z</updated>
    <entry>
    <title>Rapidly Capture Ideas with XMonad and Emacs</title>
    <link href="https://tony-zorman.com/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html" />
    <id>https://tony-zorman.com/posts/orgmode-prompt/2022-08-27-xmonad-and-org-mode.html</id>
    <published>2022-08-27T00:00:00Z</published>
    <updated>2022-08-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
        Posted on 2022-08-27
        
            by Tony Zorman
        
    </section>
    <section>
        <p>As I’ve said before, basically my entire digital life happens in either
<a href="https://www.gnu.org/software/emacs/">Emacs</a> or <a href="https://xmonad.org/">XMonad</a>. Thus, a lot of time spent on my setup either goes
towards working on the two configurations separately, or—as we’ll do
today—bringing them ever closed together.</p>
<p>Specifically, I want to showcase a new<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> XMonad module:
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">XMonad.Prompt.OrgMode</a>. Building on top of XMonad’s prompt—which works
much like <a href="https://tools.suckless.org/dmenu/">dmenu</a>—it is designed to rapidly capture thoughts and ideas
whenever inspiration strikes and, importantly, to do so without
disrupting one’s current workflow. The module recently got support for
Org <a href="https://orgmode.org/manual/Priorities.html">priorities</a>, so I figured this was as good an excuse as
any to talk about it. <!--more--></p>
<h2 id="motivation">Motivation</h2>
<p>One theme in the post about my <a href="../phd-workflow/2022-05-01-my-phd-workflow.html">research workflow</a> was how it’s possible
to use org-mode (with all of its appendages, like <a href="https://www.orgroam.com/">org-roam</a>) to
organise one’s thoughts. <code>XMonad.Prompt.OrgMode</code> was created as yet
another link in that chain. Unlike when writing tiny <a href="../2022-05-25-calling-emacs-from-xmonad.html">Emacs Lisp
scripts in XMonad</a>, this does not involve any
custom elisp code one has to run; all of it is taken care of by the
module itself.</p>
<p>The upshot of all of this is a tool to quickly and unobtrusively jot
down an idea—quiet the monkey mind—and then get back to work straight
away. For me, having something like this is very important, lest I get
distracted by some thought about another project and spend the next hour
or so working on that instead of doing what I was actually supposed to
do. Having the idea written down in a known place—perhaps even with an
automatic reminder in my <a href="https://orgmode.org/manual/Agenda-Views.html">agenda</a>—helps me get rid of that creeping
anxiety that I’m forgetting things left and right.</p>
<h2 id="functionality">Functionality</h2>
<p>The following showcases the core functionality of the module—taking
notes!</p>
<p><img class="pure-img" src="./simple-task.gif"></p>
<p>In case you <em>really</em> don’t want to forget something, there is also the
ability to create <code>DEADLINE</code> and <code>SCHEDULED</code> tasks. Optionally, you can
also specify a <a href="https://orgmode.org/manual/Priorities.html">priority</a>, depending on the importance of the note. If
you add the org file in which the TODOs are placed to the
<code>org-agenda-files</code> variable, then this will immediately show these tasks
in your agenda!</p>
<p><img class="pure-img" src="./deadline-task.gif"></p>
<p>How exactly one may specify the <code>SCHEDULED</code> and <code>DEADLINE</code> keywords, as
well as a date, time, and priority is covered in detail in the
<a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Prompt-OrgMode.html">documentation</a> for <code>X.P.OrgMode</code>.</p>
<p>Last but not least, it’s possible to capture the current (primary)
selection and, depending on the type of thing in it, use that as either
the body or the header of the task. If it’s a URL, create a link (i.e.,
it will be of the form <code>[[link][input-text]]</code>); if not, just add the
selection to the body of the note.</p>
<p><img class="pure-img" src="selection-tasks.png"></p>
<p>Of course, you can use all of this together as well—directly link to
that one paper or blog post you wanted to read, or that one YouTube
video you want to watch on the weekend!</p>
<h2 id="sample-configuration">Sample Configuration</h2>
<p>To round things off—and quickly showcase another cool (and new!)
module, <a href="https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Actions-Prefix.html">XMonad.Actions.Prefix</a>—here is a sample keybinding that takes
“normal” TODO notes on <code>M-o c</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and uses the selection when called
with a universal argument:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- uses {-# LANGUAGE LambdaCase #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">orgKey ::</span> (<span class="dt">String</span>, <span class="dt">X</span> ())</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>orgKey <span class="ot">=</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-o c&quot;</span>, withPrefixArgument <span class="op">$</span> (<span class="ot">`uncurry`</span> orgSettings) <span class="op">.</span> \<span class="kw">case</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="dt">Raw</span> _ <span class="ot">-&gt;</span> orgPromptPrimary promptNoHist</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>     _     <span class="ot">-&gt;</span> orgPrompt        promptNoHist)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  orgSettings <span class="ot">=</span> (<span class="st">&quot;TODO&quot;</span>, <span class="st">&quot;~/todos.org&quot;</span>)</span></code></pre></div>
<p>I’ve found <code>M-u</code> to be quite convenient for XMonad’s universal argument
key, mirroring the <code>C-u</code> convention from Emacs. In either case, simply
add the <code>usePrefixArgument</code> combinator somewhere to your <code>main</code> function
and give it your preferred keybinding. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> xmonad</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span> usePrefixArgument <span class="st">&quot;M-u&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="op">$</span> def{ modMask <span class="ot">=</span> mod4Mask  <span class="co">-- use &lt;Super&gt; as mod</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          }</span></code></pre></div>
<p>If you’re anything like me, this will soon become an integral part of
your workflow and you won’t want to live without it. If not, then
perhaps you still don’t understand what all the fuss is about; in either
case, I’d like to <a href="mailto:soliditsallgood@mailbox.org">hear from you</a>!</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>In version <code>0.17.0</code>, though new features are coming for <code>0.17.1</code>,
which will drop soon!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Note that for this post, <code>M</code> means <code>&lt;Super_L&gt;</code> and not <code>&lt;Alt_L&gt;</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>How to query-replace multiple matches!</title>
    <link href="https://tony-zorman.com/posts/query-replace/2022-08-06-query-replace-many.html" />
    <id>https://tony-zorman.com/posts/query-replace/2022-08-06-query-replace-many.html</id>
    <published>2022-08-06T00:00:00Z</published>
    <updated>2022-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
        Posted on 2022-08-06
        
            by Tony Zorman
        
    </section>
    <section>
        <div id="contents">
<p class="mini-header">Contents</p>
<ul>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#the-solution">The Solution</a>
<ul>
<li><a href="#the-code">The Code</a></li>
</ul></li>
</ul>
</div>
<p>As its name suggests, Emacs’s <code>query-replace</code> function (bound to <code>M-%</code>
by default) can be used to replace occurences of one string with
another. In comparison to other tools that are used for similar
purposes—(a subset of) keyboard macros and multiple-cursors—the whole
process after entering the <code>from</code> and <code>to</code> strings is interactive all
the way through: it’s very fast to step through the individual matches
and decide on the spot whether one would like to replace them or not.
Needless to say, I like <code>query-replace</code> a lot! In true Emacs fashion,
the function also takes way too many arguments: among other things, it
can operate on the current region, backwards, or only on things
surrounded by words boundaries.</p>
<p>However, there is one crucial feature missing from its default
functionality: the ability to create multiple <code>from → to</code> pairs. But
this is Emacs, after all, which means that I can just write that
<code>query-replace-many</code> function I’ve always wanted!</p>
<!--more-->
<h1 id="motivation">Motivation</h1>
<p>Originally, my motivation came through <a href="../../research.html">work</a>, where I <a href="../phd-workflow/2022-05-01-my-phd-workflow.html">write a lot of
LaTeX</a>. When polishing papers, it sometimes happens that I would like
to change or unify the notation of certain objects in the current
equation/environment/file.</p>
<p>When an alteration like this only encompasses a single action, like
switching <code>T</code> to <code>H</code>, a simple <code>query-replace</code> after narrowing to the
current region of interest is totally sufficient. For others, like
changing <code>T</code> to <code>H</code> <em>and</em> <code>S</code> to <code>G</code>, this solution, along with
multiple-cursors and other tools people usually go for, would already be
unsatisfactory—the whole region would need to be traversed twice. Now
imagine that you want to change <code>T</code> to <code>U</code> <em>and</em> <code>U</code> to <code>T</code>: chaos!
Save having to give some sort of temporary name to one of the objects,
which would be even slower, <code>query-replace</code> is quite useless in this
situation. It’s possible to cook up a manual solution using the
alternative <code>query-replace-regexp</code> function and capture groups, but I’m
unsure how many people know their elisp regular expressions well enough
for that to be time efficient. I don’t, and almost certainly never
will, so it seemed much easier to automate this instead!</p>
<h1 id="the-solution">The Solution</h1>
<p>Thankfully, since <code>replace.el</code> sports a decent API, writing a version of
<code>query-replace</code> that accepts multiple arguments turns out to be easy
enough. The high-level overview is this: we read in multiple queries
until an empty input is given<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, build up a regular expression of the
form <code>"\\(?:query-1\\|query-2\\|…\\)"</code>, and—when it comes to
replacing—test the current thing to be replaced against all of the
queries to select the correct one.</p>
<p>The beauty of this is that, since it’s really just a thin wrapper over
two functions from <code>replace.el</code> that do the heavy lifting, all of the
modules regular functionality, like the keybindings and history, just
work.</p>
<p>For example, in the following I replace <code>T</code> with <code>U</code> and, at the same
time, <code>U</code> with <code>T</code>. The first few matches are stepped through and the
rest is just accepted wholesale. At the bottom, you can see the default
<code>query-replace</code> interface when interacting with the query.</p>
<p><img class="pure-img" src="./query-replace-many.gif"></p>
<p>The only cosmetic imperfection of this is that, while the replacement
candidate itself is correctly updated, we see the whole regular
expression <code>\(?U:\|T\)</code> as the thing to be replaced instead of the bit
that’s actually matching currently. However, since this would seem to
require some work and one of course sees what’s to be replaced by
looking at the thing at point, I can very much live with this for the
moment.</p>
<h2 id="the-code">The Code</h2>
<p>Below is the full source code, in all of its hacky glory. Note that you
will need to <code>require</code> the <code>s.el</code> and <code>dash.el</code> libraries for this to
work, if you haven’t loaded these already (if you use any amount of
packages at all, chances are that you have).</p>
<!-- pandoc does not support emacs-lisp :< -->
<div class="sourceCode" id="cb1"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/get-queries </span>(&amp;optional pairs)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Get multiple `query-replace&#39; pairs from the user.</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="st">PAIRS is a list of replacement pairs of the form (FROM . TO).&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  (-let* (((from to delim arg)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>           (query-replace-read-args</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            (s-join <span class="st">&quot; &quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                    (-non-nil</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                     (<span class="kw">list</span> <span class="st">&quot;Query replace many&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                           (<span class="kw">cond</span> ((<span class="kw">eq</span> current-prefix-arg &#39;-) <span class="st">&quot;backward&quot;</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>                                 (current-prefix-arg         <span class="st">&quot;word&quot;</span>))</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>                           (<span class="kw">when</span> (use-region-p) <span class="st">&quot;in region&quot;</span>))))</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">nil</span>))                       <span class="co">; no regexp-flag</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>          (from-to (<span class="kw">cons</span> (regexp-quote from)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                         (s-replace <span class="st">&quot;</span><span class="sc">\\</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="sc">\\\\</span><span class="st">&quot;</span> to))))</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; </span><span class="al">HACK</span><span class="co">: Since the default suggestion of replace.el will be</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; the last one we&#39;ve entered, an empty string will give us</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; exactly that.  Instead of trying to fight against this,</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">;; use it in order to signal an exit.</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    (<span class="kw">if</span> (-contains? pairs from-to)</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        (<span class="kw">list</span> pairs delim arg)</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>      (slot/get-queries (<span class="kw">push</span> from-to pairs)))))</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>(<span class="kw">defun</span><span class="fu"> slot/query-replace-many</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    (pairs &amp;optional delimited start end backward region-noncontiguous-p)</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;Like `query-replace&#39;, but query for several replacements.</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="st">Query for replacement pairs until the users enters an empty</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="st">string (but see `slot/get-queries&#39;).</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="st">Refer to `query-replace&#39; and `perform-replace&#39; for what the other</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="st">arguments actually mean.&quot;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>  (interactive</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">let</span> ((common (slot/get-queries)))</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>     (<span class="kw">list</span> (<span class="kw">nth</span> <span class="dv">0</span> common) (<span class="kw">nth</span> <span class="dv">1</span> common)</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">if</span> (use-region-p) (region-beginning))</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">if</span> (use-region-p) (region-end))</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">nth</span> <span class="dv">2</span> common)</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>           (<span class="kw">if</span> (use-region-p) (region-noncontiguous-p)))))</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>  (perform-replace</span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>   (concat <span class="st">&quot;</span><span class="sc">\\</span><span class="st">(?:&quot;</span> (mapconcat #&#39;car pairs <span class="st">&quot;</span><span class="sc">\\</span><span class="st">|&quot;</span>) <span class="st">&quot;</span><span class="sc">\\</span><span class="st">)&quot;</span>) <span class="co">; build query</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>   (<span class="kw">cons</span> (<span class="kw">lambda</span> (pairs _count)</span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>           (cl-loop for (from . to) in pairs</span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">when</span> (string-match from (match-string <span class="dv">0</span>))</span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> to))</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>         pairs)</span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>   :query :regexp</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>   delimited <span class="kw">nil</span> <span class="kw">nil</span> start end backward region-noncontiguous-p))</span></code></pre></div>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>This isn’t <em>quite</em> what’s actually done, but it’s the right mental
model to have (since this is how the function behaves). The gory
details are that we use the fact that <code>replace.el</code>’s default
suggestion is always the last query that was entered by the user.
What happens on an empty input is quite deep in the bowels of
<code>query-replace-read-from</code>. Since replacing these massive internal
functions sounds like a real pain, leaning on that functionality
suddenly appears much more reasonable. Thus, when we get back a
query that has already been entered in one way or another, we bail
out.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Calling Emacs from XMonad</title>
    <link href="https://tony-zorman.com/posts/2022-05-25-calling-emacs-from-xmonad.html" />
    <id>https://tony-zorman.com/posts/2022-05-25-calling-emacs-from-xmonad.html</id>
    <published>2022-05-25T00:00:00Z</published>
    <updated>2022-05-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
        Posted on 2022-05-25
        
            by Tony Zorman
        
    </section>
    <section>
        <div id="contents">
<p class="mini-header">Contents</p>
<ul>
<li><a href="#main-use-cases">Main Use Cases</a>
<ul>
<li><a href="#scratchpads">Scratchpads</a></li>
<li><a href="#calling-emacs-in-scripts">Calling Emacs in Scripts</a></li>
<li><a href="#other-programs">Other Programs</a></li>
</ul></li>
<li><a href="#implementation-considerations">Implementation Considerations</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>
<p>In the post about my <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">research workflow</a>, I briefly mentioned having to
call Emacs—or other external programs—from within XMonad. I figured
that this was perhaps something that could be of use to more people than
just me. After a little bit of deliberation and coming up with a
generic enough API, I decided to turn it into an XMonad module!</p>
<p>Yesterday these changes were merged into the <a href="https://github.com/xmonad/xmonad-contrib">xmonad-contrib</a> repository
and they are now available for everyone to try out; provided one has the
git version of XMonad <a href="https://xmonad.org/INSTALL.html">installed</a>.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>I’d like to use this opportunity to both showcase the module—how and why
one would use it—and talk a little bit about its only redeeming
implementation detail.</p>
<!--more-->
<h1 id="main-use-cases">Main Use Cases</h1>
<p>Wouldn’t it be neat to have some kind of <a href="https://en.wikipedia.org/wiki/Domain-specific_language">EDSL</a> for spawning external
processes? Something where one can just compose Haskell functions
together, not having to worry about the actual underlying string
manipulations? Something that’s composable, so that one does not have
to write the same <code>"emacsclient -c -a '' …"</code> or <code>"alacritty --working-directory …"</code> prefix over and over again? Well, at least
that’s what I thought on some rainy afternoon a few months ago.</p>
<h2 id="scratchpads">Scratchpads</h2>
<p>The first use case that I came up with was <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Util-NamedScratchpad.html">scratchpad</a>s. The idea of
these things is very simple: while we normally don’t like floating
windows, it’s quite convenient to have some of them around that one can
bring to the current workspace, as well as hide, with a single
keybinding. This is very useful for things like email, a calendar, a
daily agenda, a calculator, etc.</p>
<p>For scratchpads to work reliably, windows need to have some unique
characteristic they can be recognised by, like a special <a href="https://tronche.com/gui/x/icccm/sec-4.html#WM_CLASS">class or
instance name</a>. Endowing an application with additional properties
sounds exactly like what our EDSL should be good at, so let’s try that!</p>
<p>Using the new features of <code>XMonad.Util.Run</code>, we could spawn an Emacs
frame with a special name for our scratchpad hooks to grab onto, and
execute <code>notmuch</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  mailSession ::</span> <span class="dt">X</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  mailSession <span class="ot">=</span> getInput <span class="op">$</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInstName</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>             <span class="op">&gt;-&gt;</span> eval (function <span class="st">&quot;notmuch&quot;</span>)</span></code></pre></div>
<p>You can read the <code>&gt;-&gt;</code> operator a little like a pipe, where you start
with what you want and thread that information through to the end: “I
want an editor with a certain frame name that also starts up notmuch”.</p>
<p>In full, the above function would produce the string (broken into a few
lines for better readability)</p>
<pre><code>  &quot;emacsclient -c -a &#39;&#39;
               -F &#39;(quote (name . \&quot;notmuch-scratch\&quot;))&#39;
               --eval &#39;(notmuch)&#39;&quot;</code></pre>
<p>which would be quite bothersome to type indeed.</p>
<p>Because the type of <code>mailSession</code> is <code>X String</code> and not just <code>String</code>,
the setup for this is a little bit different than usual when using
scratchpads. You would use it like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  myScratchpads ::</span> <span class="dt">X</span> [<span class="dt">NamedScratchpad</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  myScratchpads <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- First, get the finished string.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    mailSession <span class="ot">&lt;-</span> getInput <span class="op">$</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      inEditor <span class="op">&gt;-&gt;</span> setFrameName mailInst <span class="op">&gt;-&gt;</span> eval (elispFun <span class="st">&quot;notmuch&quot;</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- Now we can insert it into our scratchpads as normal.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> [ <span class="dt">NS</span> <span class="st">&quot;Mail&quot;</span> mailSession (appName <span class="op">=?</span> mailInst) quake ]</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    mailInst <span class="ot">=</span> <span class="st">&quot;notmuch-scratch&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    quake    <span class="ot">=</span> customFloating <span class="op">$</span> <span class="dt">RationalRect</span> <span class="dv">0</span> <span class="dv">0</span> <span class="dv">1</span> (<span class="dv">4</span> <span class="op">/</span> <span class="dv">5</span>)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- The call to @namedScratchpadManageHook@ in the manageHook also</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- needs to be slightly adjusted.</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="ot">  myManageHook ::</span> <span class="dt">ManageHook</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  myManageHook <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    [ …</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    , namedScratchpadManageHook <span class="op">=&lt;&lt;</span> liftX myScratchpads</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    ]</span></code></pre></div>
<p>Normally you would also add your <code>myScratchpads</code> list to all calls of
<code>namedScratchpadAction</code>; e.g., when you define the keys to call your
scratchpads. However, since the former lives in <code>X</code> now, this doesn’t
work anymore! Thankfully,
<a href="https://github.com/xmonad/xmonad-contrib/commit/3fc830aa09368dca04df24bf7ec4ac817f2de479">nowadays</a>
the first argument to <code>namedScratchpadAction</code> is actually unused and
only there for backwards compatibility. This means that it’s not
necessary to enter your scratchpads there at all if they are added to
your <code>manageHook</code>. For example, in the following I just provide the empty list:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;M-C-t&quot;</span>, namedScratchpadAction [] <span class="st">&quot;Mail&quot;</span>)</span></code></pre></div>
<p>This works all the same with the above definition of <code>myScratchpads</code>.</p>
<p>A full example of how a scratchpad setup would look using this machinery
can be found in <a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/xmonad/.config/xmonad/src/xmonad.hs#L414">my config</a>.</p>
<h2 id="calling-emacs-in-scripts">Calling Emacs in Scripts</h2>
<p>Spawning frames is nice and all, but how about something more
complicated, like Emacs’s batch mode so that we can use it properly in
scripts? No problem at all!</p>
<p>For example, I have the following snippet in my config to get the
currently selected text and call <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> with it to <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#citations">produce a
citation entry in my bibliography
files</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  callArXiv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  callArXiv fun <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    url <span class="ot">&lt;-</span> getSelection  <span class="co">-- from X.U.XSelection</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    proc <span class="op">$</span> inEmacs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>       <span class="op">&gt;-&gt;</span> withEmacsLibs [ <span class="dt">ElpaLib</span> <span class="st">&quot;dash&quot;</span>, <span class="dt">ElpaLib</span> <span class="st">&quot;s&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>                         , <span class="dt">ElpaLib</span> <span class="st">&quot;arxiv-citation&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                         , <span class="dt">Special</span> <span class="st">&quot;~/.config/emacs/private-stuff.el&quot;</span> ]</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>       <span class="op">&gt;-&gt;</span> asBatch</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>       <span class="op">&gt;-&gt;</span> eval (progn [require <span class="st">&quot;arxiv-citation&quot;</span>, fun <span class="op">&lt;&gt;</span> asString url])</span></code></pre></div>
<p>When executed, this translates to something like</p>
<pre><code>  emacs -L /home/slot/.config/emacs/elpa/dash-20220417.2250
        -L /home/slot/.config/emacs/elpa/s-20210616.619
        -L /home/slot/.config/emacs/elpa/arxiv-citation-20220510.1137/
        --batch
        --eval &#39;(progn
                  (require (quote arxiv-citation))
                  (arXiv-citation &quot;&lt;url-in-the-primary-selection&gt;&quot;))&#39;</code></pre>
<p>I certainly know which one I’d rather type—especially with ELPA
directory names changing quite frequently! On that note,
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a> is on MELPA now; yay!</p>
<h2 id="other-programs">Other Programs</h2>
<p>As this is my main use case for it, the new features of
<code>XMonad.Util.Run</code> are quite specialised for Emacs. However, even for
other programs they may well come in handy. Drawing from the point
about scratchpads again, here is a hypothetical one that spawns a ghci
session:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  ghci <span class="ot">&lt;-</span> proc <span class="op">$</span> inTerm <span class="op">&gt;-&gt;</span> setXClass calcInstName <span class="op">&gt;-&gt;</span> execute <span class="st">&quot;ghci&quot;</span></span></code></pre></div>
<p>Further, something that’s very useful when dealing with <a href="/posts/phd-workflow/2022-05-01-my-phd-workflow.html#topics">topic-based
workspaces</a>
is spawning a terminal or an editor already in the current topic
directory:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">import</span> <span class="dt">XMonad.Actions.TopicSpace</span>  <span class="co">-- for currentTopicDir and more</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  topicConfig <span class="ot">=</span> …</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  spawnTermInTopic ::</span> <span class="dt">X</span> ()</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  spawnTermInTopic <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    proc <span class="op">$</span> termInDir <span class="op">&gt;-$</span> currentTopicDir topicConfig</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Optionally, modify the path to the editor with a function.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ot">  spawnEditorInTopic ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">X</span> ()</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  spawnEditorInTopic with <span class="ot">=</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    proc <span class="op">$</span> inEditor <span class="op">&gt;-$</span> with <span class="op">&lt;$&gt;</span> currentTopicDir topicConfig</span></code></pre></div>
<p>Quite convenient if you ask me.</p>
<p>If you have or know of a use case you would like to support but which is
awkward with the current set of functions and combinators do not
hesitate to open a pull request or an issue!</p>
<h1 id="implementation-considerations">Implementation Considerations</h1>
<p>The implementation is actually very straightforward—no really, check out
the
<a href="https://github.com/xmonad/xmonad-contrib/blob/master/XMonad/Util/Run.hs#L303">source</a>
if you don’t believe me!</p>
<p>One concept that’s still worth touching upon is the internal use of
<a href="https://github.com/spl/dlist#references">difference list</a>s. The basic idea of these things is that, instead of
concatenating strings one by one, we create functions <code>String -&gt; String</code>
and then use function composition to do the work for us:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Ordinary string concatenation</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- Using difference lists:</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  string1, string2, string3,<span class="ot"> string4 ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  string1 s <span class="ot">=</span> <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> s</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  string2 s <span class="ot">=</span> …</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Note how we have to apply the entire thing to <code>""</code> at the end in order
to actually get a string back. As a concrete example, assuming we have
set <code>"Emacs"</code> as our editor, the <code>inEditor</code> function would essentially
be</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  inEditor ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  inEditor s <span class="ot">=</span> <span class="st">&quot; Emacs &quot;</span> <span class="op">&lt;&gt;</span> s</span></code></pre></div>
<p>There are some further considerations to be made, since we are in the
<code>X</code> monad and thus the type is actually <code>X (String -&gt; String)</code> instead
of just <code>String -&gt; String</code>, but that isn’t too important for us here.</p>
<p>Difference lists have some performance advantages over the traditional
concatenation of strings. The concatenation <code>(&lt;&gt;)</code> on strings is left
associative by default and so</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  ≡ ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>However, the complexity characteristics of this operation are working
against us here; the definition of <code>(&lt;&gt;)</code> on <code>String</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> is</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">  (&lt;&gt;) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  []       <span class="op">&lt;&gt;</span> ys <span class="ot">=</span>           ys</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  (x <span class="op">:</span> xs) <span class="op">&lt;&gt;</span> ys <span class="ot">=</span> x <span class="op">:</span> xs <span class="op">&lt;&gt;</span> ys</span></code></pre></div>
<p>We are merely traversing the first string, leaving the second one
completely untouched (and unevaluated!). All in all, this means that
<code>s₁ &lt;&gt; s₂</code> is in <code>𝓞(|s₁|)</code>; given an expression of the form</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  ((<span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;string2&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string3&quot;</span>) <span class="op">&lt;&gt;</span> <span class="st">&quot;string4&quot;</span></span></code></pre></div>
<p>we will have to walk over <code>"string1"</code> three times! What we actually
want is a right-associative ordering—exactly what function compositions
gives us. Spelled out,</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    string1 <span class="op">.</span> string2 <span class="op">.</span> string3 <span class="op">.</span> string4 <span class="op">$</span> <span class="st">&quot;&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 (string2 (string3 (string4 <span class="st">&quot;&quot;</span>)))</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  ≡ <span class="st">&quot;string1&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string2&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string3&quot;</span> <span class="op">&lt;&gt;</span> (<span class="st">&quot;string4&quot;</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&quot;</span>)))</span></code></pre></div>
<p>which yields the desired behaviour. In fact, this is so canonical that
instead of using <code>(.)</code>, we could have also—perhaps a bit
confusingly—used <code>(&lt;&gt;)</code> directly:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    string1  <span class="op">.</span> string2  <span class="op">.</span> string3  <span class="op">.</span> string4</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  ≡ string1 <span class="op">&lt;&gt;</span> string2 <span class="op">&lt;&gt;</span> string3 <span class="op">&lt;&gt;</span> string4</span></code></pre></div>
<p>This is the fact that the <em>endomorphisms</em> for any type <code>a</code>—the functions
<code>a -&gt; a</code>—form a <em>monoid</em>. That is to say that they come equipped with
an associative an unital operation: function composition. In Haskell,
<code>(&lt;&gt;)</code> is, in some sense,
<a href="https://www.haskell.org/tutorial/classes.html">overloaded</a> so that it
can be used with any monoidal composition one can think of!<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>The attentive reader may have concluded that the pipe operator that we
called <code>(&gt;-&gt;)</code> above is really just <code>(&lt;&gt;)</code> in disguise, and that’s
exactly right! I, however, thought that for people not familiar with
Haskell, giving it a pipe-like appearance would be more conceptually
amenable to the threading idea.</p>
<p>I haven’t benchmarked this, so it’s not entirely clear to me whether
performance is actually relevant in this situation,<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> but using
difference lists just feels right here, and so I did.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I have to say that I’m quite satisfied with this API. In fact, if I
look at the old code that only resided within my personal config, it’s
even a bit more ergonomic in a few places, despite having essentially no
user-specific strings hardcoded anywhere! As I said before, if you try
this and find something missing, do let me know and we’ll probably find
a solution! If you try this and find it useful, also let me know :)</p>
<p>Of course, technically none of this needs to live only inside your
XMonad config at all. In combination with the excellent <a href="https://hackage.haskell.org/package/turtle">turtle</a>
library, I reckon it would be quite easy to produce Haskell versions of
cool tools like magit.sh<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>. Go nuts!</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>If you <em>really</em> want to try this feature but don’t want to bother
installing any unreleased—though stable—version, message me in any
way and maybe we’ll hurry up and cut 0.17.1 soon!<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Really, this is the definition of <code>(++)</code> for arbitrary lists <code>[a]</code>
and <code>(&lt;&gt;) = (++)</code> for <code>String = [Char]</code>, but let’s not get into
that here.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Really, for any <em>semigroup</em>, which is a slightly weaker notion of
an operation that is merely associative, but doesn’t necessarily
have a unit.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>I suspect that the answer is “probably not”—that didn’t stop me,
however!<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>Available <a href="https://github.com/alphapapa/magit.sh">here</a>. I also
maintain a slightly modified and POSIX shell compatible version
<a href="https://gitlab.com/slotThe/dotfiles/-/blob/master/scripts/.scripts/magit.sh">here</a>.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>My PhD Research Workflow</title>
    <link href="https://tony-zorman.com/posts/phd-workflow/2022-05-01-my-phd-workflow.html" />
    <id>https://tony-zorman.com/posts/phd-workflow/2022-05-01-my-phd-workflow.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
        Posted on 2022-05-01
        
            by Tony Zorman
        
    </section>
    <section>
        <div id="contents">
<p class="mini-header">Contents</p>
<ul>
<li><a href="#high-level-structure">High Level Structure</a>
<ul>
<li><a href="#topics">Topics</a></li>
<li><a href="#files">Files</a></li>
</ul></li>
<li><a href="#note-taking">Note Taking</a>
<ul>
<li><a href="#handwritten-notes">Handwritten Notes</a></li>
<li><a href="#digital-notes">Digital Notes</a></li>
</ul></li>
<li><a href="#staying-up-to-date">Staying Up To Date</a>
<ul>
<li><a href="#citations">Citations</a></li>
</ul></li>
<li><a href="#final-thoughts">Final Thoughts</a></li>
</ul>
</div>
<p>After reading <a href="https://castel.dev/post/research-workflow/">Gilles Castel</a>’s excellent blog post about his research
workflow, I decided that it was as good a time as any to write about
mine—deeming it novel enough to hopefully contribute something to the
discussion.</p>
<p>Just like Castel, I’m a new PhD student in mathematics, which means no
lab work and—in my case—no code. Just you and your inability to
understand basic concepts. As such, I often scribble things down on
paper or a blackboard first and, when sufficiently convinced that the
information is worth keeping around, type it up. Typesetting something
is a surprisingly effective way to catch errors in handwritten
manuscripts!</p>
<p>As basically my entire digital life happens in either <a href="https://www.gnu.org/software/emacs/">Emacs</a> or
<a href="https://xmonad.org/">XMonad</a>, my setup is very heavily skewed in that direction; I will make
use of these tools almost every step of the way.
<!--more-->
As such, there is a lot of tangential almost relevant bits that I could
cover here. However, since these aren’t directly related to my
<em>research</em> workflow—and there is a lot of great resources out there
already—I decided to not do this here.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h1 id="high-level-structure">High Level Structure</h1>
<h2 id="topics">Topics</h2>
<p>XMonad has a module called <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/xmonad-actions-topicspace.html">TopicSpace</a>, which upgrades the X11
workspace—virtual desktop—concept to so-called topics. These are
workspaces with a “theme” associated to them; for example, I have a
topic for every project that I’m currently working on. This results in
a very clean separation of concerns. Plus, I always know where my
windows are!</p>
<p>Every topic has a directory and a “startup hook”, firing when the topic
is switched to and empty, associated to it. While most convenient for
programming related tasks—e.g., spawn <code>ghcid</code> in the relevant directory
or automatically build and open this website—it’s also quite convenient
for mathematical projects.</p>
<p>I have set up special keybindings to bring up an Emacs session in the
topic directory, or spawn a terminal there. Switching to topics is done
fuzzily via the XMonad prompt, which means I only have to type a few
characters to get to my destination. This makes it feasible to have 30
topics, instead of the usual 9 or so, in the first place. As a result,
it’s rather fast to go from thinking about a certain problem to working
on it. When I’m already inside a project, I leverage Emacs’s built-in
<code>project.el</code> library to search through files and the like.</p>
<p><img class="pure-img" src="./topics.gif"></p>
<h2 id="files">Files</h2>
<p>Here I keep things relatively simple; I have a big “library” directory
in which essentially all books or papers that I’ve ever read reside.
This may sound a bit chaotic, but since I never interact with this
as-a-directory it is actually the easiest and cleanest solution for me.</p>
<p>To keep a bit of order, all files are named in a consistent and
descriptive way: <code>authors_title.pdf</code>, where <code>authors</code> is a list of last
names of all authors separated by hyphens and <code>title</code> is the title of
the work, also separated by hyphens. For example:</p>
<pre><code>    pastro-street_double-of-a-monoidal-category.pdf</code></pre>
<p>Also in this directory are <code>.xopp</code> files, when I scribble on the
relevant PDFs in <a href="https://xournalpp.github.io/">xournalpp</a>; more on that later.</p>
<p>Instead of navigating to it, all interaction with the library is done
via <a href="https://github.com/slotthe/hmenu">hmenu</a>, a small wrapper around <a href="https://tools.suckless.org/dmenu/">dmenu</a> to facilitate this kind of
behaviour. I merely have to press <code>M-y</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and can then fuzzy search
through the directory. Once I’ve made a choice, PDFs are automatically
opened in <a href="https://pwmt.org/projects/zathura/">zathura</a> and <code>.xopp</code> files are opened in xournalpp.</p>
<p><img class="pure-img" src="./hmenu.gif"></p>
<p>My bibliography is organised in a similar spirit; see
<a href="#citations">Citations</a>.</p>
<h1 id="note-taking">Note Taking</h1>
<h2 id="handwritten-notes">Handwritten Notes</h2>
<p>For handwritten notes I… use real paper! A little elaboration is
probably in order, having talked about <code>.xopp</code> files and xournalpp
above. I do have a Wacom tablet lying around and I’m quite happy
annotating PDFs with it. In lieu of printing everything out, this
alleviates a little bit of the usual pain with reading papers, like
coming back to one three weeks later and getting stuck on the same
calculation as last time. I do love those annotations!</p>
<p>However, there is just something deeply psychologically pleasing about
ordinary pen and paper—nothing beats drawing up the first version of
many ideas there. It’s a very “pure” experience: there’s no noise or
distractions, nothing that could break, no additional layer of
abstraction between you and the maths. Chalkboards—but not whiteboards,
with their ever empty markers—fall into this category as well,
especially when collaborating with others.</p>
<p>Not without my quirks (as I’m sure you’ve noticed), I’m a bit picky
about the particular writing setup. It’s either completely white A5<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>
paper, paired with a good (mechanical) pencil/a very fine pen, or very
thick dotted paper, paired with a fountain pen.</p>
<p>Quite enjoying the experience, I tend to write quite a lot of
manuscripts by hand first. Of course, anything that’s supposed to be
permanent should be typed up properly!</p>
<h2 id="digital-notes">Digital Notes</h2>
<p>Not wanting to go insane, I use LaTeX for all of my digital digital note
taking. My writing setup for <code>.tex</code> files is pretty similar to <a href="https://karthinks.com/software/latex-input-for-impatient-scholars/">Karthik
Chikmagalur</a>’s—whose excellent post you should definitely check out—so I
will not belabour the point too much here. The tl;dr is <a href="https://www.gnu.org/software/auctex/">AUCTeX</a>,
<a href="https://github.com/cdominik/cdlatex">CDLaTeX</a>, and <a href="https://github.com/ymarco/auto-activating-snippets">aas</a>.</p>
<p><img class="pure-img" src="./input.gif"></p>
<p>In case you’re not used to <code>prettify-symbols-mode</code>: the inserted LaTeX
code was</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tex"><code class="sourceCode latex"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">\begin</span>{<span class="ex">definition</span>} <span class="kw">\label</span>{<span class="ex">def:day-convolution</span>}</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  The <span class="fu">\emph</span>{Day convolution} of two functors <span class="ss">$F$</span> and <span class="ss">$G$</span> is</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="ss">\[</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ss">    F * G </span><span class="sc">\defeq</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ss">      </span><span class="sc">\int</span><span class="ss">^{C,D </span><span class="sc">\in</span><span class="ss"> </span><span class="sc">\cc</span><span class="ss">} </span><span class="sc">\cc</span><span class="ss">(C </span><span class="sc">\otimes</span><span class="ss"> D, </span><span class="sc">\blank</span><span class="ss">) </span><span class="sc">\otimes</span><span class="ss"> FC </span><span class="sc">\otimes</span><span class="ss"> GD.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ss">  \]</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">\end</span>{<span class="ex">definition</span>}</span></code></pre></div>
<p>I do use some smaller packages not mentioned in Chikmagalur’s article,
like <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a> and <a href="https://github.com/slotthe/change-env">latex-change-env</a>. The former is for
quickly changing between inline and display math, complete with slurping
punctuation symbols into display math and barfing them out of inline
math. For example, “<code>$1 + 1$.</code>” becomes “<code>\[1 + 1.\]</code>” (with line
breaks) and back.</p>
<p>The <code>latex-change-env</code> package is for changing between different kinds
of environments, including display math, while offering to rename labels
across the project if necessary. When deleting a label from an
environment, it also remembers this for the session!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<p><img class="pure-img" src="./label-renaming.gif"></p>
<p>One very neat feature of AUCTeX that I find myself using more and more
often lately<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> is the in-buffer preview. Usually when writing a draft
I’m not that interested in how exactly something looks in the PDF—that
part comes later, believe me. In cases like these, just calling
<code>preview-buffer</code> is quite convenient and lets me use the screen real
estate that a PDF viewer would have taken up for something else.</p>
<p><img class="pure-img" src="./preview.gif"></p>
<p>I always use pure LaTeX for writing papers, drafts, or presentations.
However, I also take lots of notes in <a href="https://orgmode.org/">org-mode</a>, which, as a crude
first approximation, is something like a markup language that’s <em>very</em>
well integrated into Emacs.</p>
<p>For the actual note-taking, I use the venerable <a href="https://www.orgroam.com/">org-roam</a>—a free
software alternative to the proprietary Roam Research program—to jot
down things that I’d like to remember for more than three days.
Org-roam describes itself as a “plain-text personal knowledge management
system”, which fits the bill pretty well. In short, it’s a note taking
system in the spirit of the <a href="https://en.wikipedia.org/wiki/zettelkasten">Zettelkasten</a> method, which is essentially
about having lots of notes with lots of backlinks to related concepts:</p>
<p><img class="pure-img" src="./backlinks.png"></p>
<p>In fact, using <a href="https://github.com/org-roam/org-roam-ui">org-roam-ui</a>, one can even visualise the entire
Zettelkasten as an interactive and pretty graph in which notes become
nodes and backlinks become edges!</p>
<div class="pure-g">
<div class="pure-u-1-2">
<img class="pure-img" src="./org-roam-ui-close.png">
</div>
<div class="pure-u-1-2">
<img class="pure-img" src="./org-roam-ui-far.png">
</div>
</div>
<p>Org-roam <a href="https://github.com/org-roam/org-roam#configuration">suggests
keybindings</a> for all
of the most important concepts: creating notes, inserting them, showing
all of the backlinks of a file, etc. An important extra that I’ve added
is having two “types” of notes: <code>reference</code>s, where things that I
learned but are otherwise known reside, and <code>novel</code>s, where I put my own
ideas.</p>
<p>As I’m predisposed to quite easily forget details, I regularly engage
with my Zettelkasten, so as to keep things fresh in my mind. Reading
through all of the notes that are relevant to what I’m currently working
on, creating new backlinks, filling in gaps, even deleting old
information and re-organising some local region of the graph. Indeed, I
tag every new entry as a <code>draft</code> until further notice, forcing me to go
back there especially. This results in pretty good recollection of the
most important facts, even with my brain.</p>
<h1 id="staying-up-to-date">Staying Up To Date</h1>
<p>I use <a href="https://github.com/skeeto/elfeed">elfeed</a> to query the <a href="https://arxiv.org/">arXiv</a> for new preprints that are of
interest to me. Thankfully, the fields I’m subscribed to tend to be
moving slow-ish and so I can manage to at least read the abstract of
every paper that pops up in my feed. There is also <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/emacs/.config/emacs/lisp/rss.el#L61">a little bit of
elisp</a>
involved to print arXiv entries in a more readable way than the default
formatting.</p>
<p>When the abstract interests me, I usually directly download the paper
into my library and open it with zathura. This is fully automated via
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>—more on that later. I merely have to press <code>C-c d</code>
while looking at a paper and magic happens!</p>
<p><img class="pure-img" src="./elfeed.gif"></p>
<p>In the above gif, on the right-hand side you can see a score associated
to each entry. While reading every abstract has worked quite well for
me thus far, it’s nice to get the papers that are “probably interesting”
high up, so that I’m more likely to notice them sooner rather than
later. I use <a href="https://github.com/sp1ff/elfeed-score">elfeed-score</a> for this, which integrates seamlessly into
the rest of the machinery. It compares certain features of the entry
(like the title and abstract) with a list of regular expressions,
increasing the total score of the entry every time it matches something.</p>
<p>Speaking of the arXiv, in XMonad I have bound <code>M-s a</code> to look up the
given string there. Likewise, <a href="https://zbmath.org/">zbmath</a> is searched with <code>M-s z</code>. When
these commands get a “universal argument”—an Emacs concept that XMonad
borrowed—they automatically start a search with the current selection
instead. Briefly, pressing <code>M-u</code> before a command can modify it in
different ways. All of my search commands act on the <a href="https://www.jwz.org/doc/x-cut-and-paste.html">primary
selection</a> when given such an argument; <code>M-u M-s &lt;letter&gt;</code> will look up
the currently selected text on the relevant “search engine”. One
instance where this is very useful is for quickly switching between the
arXiv and zbmath:</p>
<p><img class="pure-img" src="./selected-search.gif"></p>
<h2 id="citations">Citations</h2>
<p>For citation management, I use a very simple system—no Zotero, JabRef,
or similar technology. Concretely, this means that I have a blessed
bibliography file somewhere within my home directory and I either
symlink (when I’m writing something alone) or copy (when working with at
least one coauthor) the file into the relevant project directory. In
case of a copy operation, I only have to update a single variable in
Emacs (<code>arxiv-citation-bibtex-files</code>), which is good enough for me and
doesn’t seem to warrant a slightly more automated, yet probably much
more complicated solution.</p>
<p>Adding new citations is done via the now aptly named Emacs package
<a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>, with <a href="https://gitlab.com/slotThe/dotfiles/-/blob/afa8fd39cea2647152038e3f4dd42f1dbd66c413/xmonad/.config/xmonad/src/xmonad.hs#L576">a bit of
plumbing</a>
on the XMonad side to get Emacs going. The basic idea is that—given an
arXiv or zbmath link—we first look up the paper on zbmath to see if it
was published and, if not, just use the arXiv data to construct our own
bibliography entry instead. By default, my keybinding for this acts on
the primary selection, so I merely have to highlight the link, press
<code>M-o a</code>, sit back, and enjoy the show. The following gif hopefully
helps drive home the point, also showcasing the format of a not yet
published paper and a published one.</p>
<p><img class="pure-img" src="./arXiv-citation.gif"></p>
<h1 id="final-thoughts">Final Thoughts</h1>
<p>And that’s it! If nothing else, this post helped me to nail down some
ideas that I had lying around and got me to finally clean up and publish
many of the extensions talked about here—that’s already a win in my
book.</p>
<p>I’m sure that some details will change over the course of the next three
years as I mature mathematically and my needs change, but overall I feel
pretty comfortable with this setup.</p>
<h4 id="addendum">Addendum</h4>
<p>Thanks to everyone who reached out! I received some inquiries as to my
configurations, so here are the most important bits again, for your
convenience:
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/emacs/.config/emacs">my Emacs config</a>,
<a href="https://gitlab.com/slotThe/dotfiles/-/tree/master/xmonad/.config/xmonad">my XMonad config</a>,
<a href="https://www.orgroam.com/">org-roam</a>, <a href="https://github.com/oantolin/math-delimiters">math-delimiters</a>, <a href="https://github.com/slotthe/arxiv-citation">arxiv-citation</a>, <a href="https://github.com/slotthe/change-env">latex-change-env</a>,
<a href="https://github.com/slotthe/hmenu">hmenu</a>.</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>If you’d like some examples: being employed at a university also
means I have to worry a bit about efficiently dealing with
bureaucracy (<a href="https://notmuchmail.org/">notmuch.el</a>), keeping some sort of up-to-date
calendar and readable todo-notes (<a href="https://orgmode.org/">org-mode</a> and goodies, as well
as integration via <a href="https://hackage.haskell.org/package/xmonad-contrib/docs/XMonad-Prompt-OrgMode.html">XMonad’s OrgMode prompt</a>), accessing the
universities internal nextcloud server (<a href="https://gitlab.com/hperrey/khalel">khalel</a> and <code>davfs2</code> or
<code>TRAMP</code>), … You get the idea.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>I will be using Emacs style notation throughout the entire
article. This means that, for example, <code>C-x a</code> should be read as
“hold down control and press x, then release both and press a”.
You can of course safely ignore this, since the keys just serve
illustrative purposes. An important note for Emacs users, lest
anyone be confused: in XMonad, <code>M-</code> usually does not__ refer to
the Meta key, but to the <code>modMask</code> that the user specified. This
is indeed <code>&lt;Alt&gt;</code> by default, but many people understandably
rebind this straight away to something that’s less likely to
interfere with other programs. In my case, that’s the Super key,
so <code>M-s</code> means <code>&lt;Super&gt;-s</code> and not <code>&lt;Alt&gt;-s</code>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Although, admittedly, when drawing up very large diagrams I’m
sometimes forced to switch to A4 paper in landscape mode.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>This is based on the hash of the contents of the environment—if
that changes, the label is “lost”; though it can of course still
be retrieved manually from the relevant hash map.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>This is, in part, due to the new <code>pixel-scroll-precision-mode</code> in
Emacs 29, making use of XInput 2.4 functionality. It makes
scrolling through buffers that are quite dense with pictures
rather smooth.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>Ostensibly, this should be an XMonad module, as it does not
necessarily have anything to do with Emacs itself. However, I had
already written the elfeed integration and so the most annoying
part (scraping the arXiv xml for certain bits) was already done.
On the other hand, there are more Emacs than XMonad users, so
perhaps doing it like this will help more people anyways.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

    </section>
</article>
]]></summary>
</entry>

</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman – Blog</title>
    <link href="https://tony-zorman.com/atom-haskell.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom-haskell.xml</id>
    <author>
        <name>Tony Zorman</name>
        <email>tonyzorman@mailbox.org</email>
    </author>
    <updated>2023-01-21T00:00:00Z</updated>
    <entry>
    <title>Pygmentising Hakyll's Syntax Highlighting</title>
    <link href="https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html" />
    <id>https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html</id>
    <published>2023-01-21T00:00:00Z</published>
    <updated>2023-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2023-01-21
      
        | <a title="All pages tagged 'haskell'." href="/tags/haskell.html">haskell</a>
      
    </section>
    <section>
      
        
      
        <p>By default, Hakyll uses pandoc to generate syntax highlighting for all
kinds of different programming languages. However, even in simple
examples the HTML this produces is unsatisfactory. Thankfully, the two
programs are almost infinitely customisable, and changing pretty much
any setting doesn’t usually involve a lot of work—this is no exception.
Using <code>pygmentize</code> as an example, I will show you how you can swap out
pandoc’s native syntax highlighting with pretty much any third party
tool that can output HTML.</p>
<!--more-->
<h1 id="the-problem">The Problem</h1>
<p>Pandoc uses the <a href="https://hackage.haskell.org/package/skylighting">skylighting</a> library to generate syntax highlighting
for a given block of code. Skylighting, in turn, uses <a href="https://docs.kde.org/stable5/en/kate/katepart/highlight.html">KDE XML syntax
definitions</a> for the respective tokenisers. However, even for simple
examples I don’t agree with the HTML this generates. Consider the
following Haskell code block.</p>
<div class="highlight"><pre><span></span><span class="nf">fibs</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Integer</span><span class="p">]</span>
<span class="nf">fibs</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="n">scanl'</span><span class="w"> </span><span class="p">(</span><span class="o">+</span><span class="p">)</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">fibs</span>
</pre></div>

<p>Pandoc would generate something like the following:</p>
<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sourceCode&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;cb1&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">pre</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sourceCode haskell&quot;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">code</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sourceCode haskell&quot;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;cb1-1&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;#cb1-1&quot;</span> <span class="na">aria-hidden</span><span class="o">=</span><span class="s">&quot;true&quot;</span> <span class="na">tabindex</span><span class="o">=</span><span class="s">&quot;-1&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ot&quot;</span><span class="p">&gt;</span>    fibs :: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> [<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dt&quot;</span><span class="p">&gt;</span>Integer <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>]
      <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;cb1-2&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;#cb1-2&quot;</span> <span class="na">aria-hidden</span><span class="o">=</span><span class="s">&quot;true&quot;</span> <span class="na">tabindex</span><span class="o">=</span><span class="s">&quot;-1&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>    fibs
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ot&quot;</span><span class="p">&gt;</span>= <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dv&quot;</span><span class="p">&gt;</span>0 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;op&quot;</span><span class="p">&gt;</span>: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        scanl<span class="ni">&amp;#39;</span> (<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;op&quot;</span><span class="p">&gt;</span>+ <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>) <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dv&quot;</span><span class="p">&gt;</span>1
        <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> fibs
      <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>

<p>One can already see a few things wrong with this: (i) in the type
signature, the name of the list is smushed together with the separating
double colon (worse: it’s just in the “other” syntax class), (ii) in the
actual definition, <code>fibs</code> isn’t assigned any class at all, and (iii) the
assignment operator is also in the “other” class, instead of something
related to it being a built in operator! As one can imagine, this only
gets worse as snippets get more complicated.</p>
<p>These kinds of issues, combined with the fact that certain
languages—like Emacs Lisp—don’t have any syntax definitions at all,
annoyed me enough to look for an alternative way to highlight code on
this website.<span class="sidenote-wrapper"><label for="sn-0" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-0" class="margin-toggle" /><span class="sidenote">All of this work for a mostly greyscale theme!<br />
<br />
</span></span> There are of course many options to choose from; I
went with <code>pygmentize</code>, solely because I already had it installed. All
that’s left is to tell pandoc and Hakyll to make use of it. As
mentioned, this thankfully doesn’t turn out to be very difficult!</p>
<h1 id="playing-with-pygmentize">Playing with <code>pygmentize</code></h1>
<p>Having never used <code>pygmentize</code> as a command line utility,<span class="sidenote-wrapper"><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle" /><span class="sidenote">So far, the only interaction I had with the program was through
the excellent <a href="https://ctan.org/pkg/minted?lang=en">minted</a> LaTeX package.<br />
<br />
</span></span> I expected
this to take some work—possibly involving Python <em>shudder</em>—but all of
the necessary pieces are already present in the CLI. First up, the <code>-f</code>
option specifies the formatter to use, which will decide the shape of
the output.</p>
<div class="highlight"><pre><span></span><span class="gp">$ </span>pygmentize<span class="w"> </span>-L<span class="w"> </span>formatter<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>html
<span class="go">* html:</span>
<span class="go">    Format tokens as HTML 4 ``&lt;span&gt;`` tags within a ``&lt;pre&gt;`` tag, wrapped in a ``&lt;div&gt;`` tag. The ``&lt;div&gt;``'s CSS class can be set by the `cssclass` option. (filenames *.html, *.htm)</span>
</pre></div>

<p>We can test how this highlighting looks straight away; executing</p>
<div class="highlight"><pre><span></span><span class="gp">$ </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;fibs :: [Integer]\nfibs = 0 : scanl' (+) 1 fibs&quot;</span><span class="w"> </span><span class="se">\</span>
<span class="w">   </span><span class="se">\ </span><span class="p">|</span><span class="w"> </span>pygmentize<span class="w"> </span>-l<span class="w"> </span>haskell<span class="w"> </span>-f<span class="w"> </span>html
</pre></div>

<p>produces an HTML output along the lines of</p>
<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;nf&quot;</span><span class="p">&gt;</span>fibs <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ow&quot;</span><span class="p">&gt;</span>:: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>[<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;kt&quot;</span><span class="p">&gt;</span>Integer <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>] <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;nf&quot;</span><span class="p">&gt;</span>fibs <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ow&quot;</span><span class="p">&gt;</span>= <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;mi&quot;</span><span class="p">&gt;</span>0 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;kt&quot;</span><span class="p">&gt;</span>: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">&gt;</span>scanl<span class="ni">&amp;#39;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>(<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;o&quot;</span><span class="p">&gt;</span>+ <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>) <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;mi&quot;</span><span class="p">&gt;</span>1 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">&gt;</span>fibs <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>

<p>This looks much better! The class names are kind of obtuse, but
<code>pygmentize</code> can also give you nicely annotated CSS styles for its
supported colour schemes. For example, the following is a small excerpt
of the output:</p>
<div class="highlight"><pre><span></span><span class="gp">$ </span>pygmentize<span class="w"> </span>-S<span class="w"> </span>emacs<span class="w"> </span>-f<span class="w"> </span>html
<span class="go">…</span>
<span class="go">.nf { color: #00A000 }                    /* Name.Function */</span>
<span class="go">.ow { color: #AA22FF; font-weight: bold } /* Operator.Word */</span>
<span class="go">.kt { color: #00BB00; font-weight: bold } /* Keyword.Type */</span>
<span class="go">.w { color: #bbbbbb }                     /* Text.Whitespace */</span>
<span class="go">.c { color: #008800; font-style: italic } /* Comment */</span>
<span class="go">…</span>
</pre></div>

<p>You can redirect this into a <code>pygments.css</code> file, link to it (e.g., from
your <code>default.html</code> template), and be on your way. The annotation also
makes it very easy to change that file after the fact, in case
<code>pygmentize</code> does not have the theme that you want.</p>
<h1 id="integration">Integration</h1>
<p>The idea of what we want to do is quite simple: for every code block in
a given post, shell out to <code>pygmentize</code>, and use its output to replace
the block, somehow making sure pandoc doesn’t touch it afterwards.
Let’s solve this step by step.</p>
<h2 id="pandoc">Pandoc</h2>
<p>Pandoc has an aptly named <code>Pandoc</code> type, which represents the internal
structure of a document.</p>
<div class="highlight"><pre><span></span><span class="kr">data</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="kt">Meta</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
</pre></div>

<p>We’ll neglect the metadata for now and just look at the <code>Block</code>s;
specifically, we want to zoom in on two constructors that will give you
everything we need:</p>
<div class="highlight"><pre><span></span><span class="kr">data</span><span class="w"> </span><span class="kt">Block</span>
<span class="w">  </span><span class="c1">-- Lots of other constructors omitted</span>
<span class="w">  </span><span class="ow">=</span><span class="w"> </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="kt">Attr</span><span class="w"> </span><span class="kt">Text</span><span class="w">   </span><span class="c1">-- ^ Code block (literal) with attributes</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="kt">RawBlock</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="kt">Text</span><span class="w">  </span><span class="c1">-- ^ Raw block</span>

<span class="c1">-- | Attributes: identifier, classes, key-value pairs</span>
<span class="kr">type</span><span class="w"> </span><span class="kt">Attr</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="p">(</span><span class="kt">Text</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="kt">Text</span><span class="p">],</span><span class="w"> </span><span class="p">[(</span><span class="kt">Text</span><span class="p">,</span><span class="w"> </span><span class="kt">Text</span><span class="p">)])</span>

<span class="c1">-- | Formats for raw blocks</span>
<span class="kr">newtype</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="kt">Text</span>
</pre></div>

<p>To get a feeling for how these <code>CodeBlock</code>s look, again consider our
<code>fibs</code> example from above. By default, the corresponding <code>CodeBlock</code>
for this would look something like</p>
<div class="highlight"><pre><span></span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;haskell&quot;</span><span class="p">],</span><span class="w"> </span><span class="kt">[]</span><span class="p">)</span>
<span class="w">          </span><span class="s">&quot;fibs :: [Integer]</span><span class="se">\n</span><span class="s">fibs = 0 : scanl' (+) 1 fibs&quot;</span>
</pre></div>

<p>Importantly, the language (if any) is the first argument of the
<code>classes</code> field of <code>Attr</code>.</p>
<p>A strategy begins to form: look for all occurences of a <code>CodeBlock</code> in
the <code>Pandoc</code> type, and replace it with a <code>RawBlock "html"</code> such that it
isn’t touched anymore. Doing so will not pose very many
challenges—pandoc has really great capabilities for
<a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Walk.html">walking</a> its AST in order to facilitate exactly these
kinds of changes. Unsurprisingly, the <code>Walkable</code> class resides over all
things walkable; an abbreviated definition looks like this:</p>
<div class="highlight"><pre><span></span><span class="kr">class</span><span class="w"> </span><span class="kt">Walkable</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="c1">-- | @walk f x@ walks the structure @x@ (bottom up) and replaces every</span>
<span class="w">  </span><span class="c1">-- occurrence of an @a@ with the result of applying @f@ to it.</span>
<span class="w">  </span><span class="n">walk</span><span class="w">  </span><span class="ow">::</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b</span>
<span class="w">  </span><span class="n">walk</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">runIdentity</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">walkM</span><span class="w"> </span><span class="p">(</span><span class="n">return</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">f</span><span class="p">)</span>

<span class="w">  </span><span class="c1">-- | A monadic version of 'walk'.</span>
<span class="w">  </span><span class="n">walkM</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">(</span><span class="kt">Monad</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="kt">Applicative</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="kt">Functor</span><span class="w"> </span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="ow">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="n">b</span>
</pre></div>

<p>Specifically, as we’ll need to shell out to an external program, let us
restrict our attention to the more general <code>walkM</code> function here. There
is an instance</p>
<div class="highlight"><pre><span></span><span class="kr">instance</span><span class="w"> </span><span class="kt">Walkable</span><span class="w"> </span><span class="kt">Block</span><span class="w"> </span><span class="kt">Pandoc</span>
</pre></div>

<p>which will be all that we need. The necessary code now just
materialises in front of our eyes:<span class="sidenote-wrapper"><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle" /><span class="sidenote">If all else fails, simply <a href="https://aphyr.com/posts/353-rewriting-the-technical-interview">trace the sigils in the air and give
them form</a>.<br />
<br />
</span></span></p>
<div class="highlight"><pre><span></span><span class="c1">-- {-# LANGUAGE BlockArguments    #-}</span>
<span class="c1">-- {-# LANGUAGE LambdaCase        #-}</span>
<span class="c1">-- {-# LANGUAGE OverloadedStrings #-}</span>
<span class="c1">-- {-# LANGUAGE ViewPatterns      #-}</span>
<span class="c1">--</span>
<span class="c1">-- import Data.Maybe (fromMaybe, listToMaybe)</span>
<span class="c1">-- import qualified Data.Text as T</span>
<span class="c1">-- import Hakyll</span>
<span class="c1">-- import System.Process (readProcess)</span>
<span class="c1">-- import Text.Pandoc.Definition (Block (CodeBlock, RawBlock), Pandoc)</span>
<span class="c1">-- import Text.Pandoc.Walk (walk, walkM)</span>

<span class="nf">pygmentsHighlight</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="kt">Pandoc</span>
<span class="nf">pygmentsHighlight</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">walkM</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">  </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">lang</span><span class="p">)</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">    </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">unsafeCompiler</span><span class="w"> </span><span class="p">(</span><span class="n">callPygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="n">body</span><span class="p">)</span>
<span class="w">  </span><span class="n">block</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="n">block</span>
<span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">pygs</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">String</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">String</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="kt">String</span>
<span class="w">  </span><span class="n">pygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">readProcess</span><span class="w"> </span><span class="s">&quot;pygmentize&quot;</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;-l&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">lang</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;-f&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="p">]</span>
</pre></div>

<p>Notice how <em>a priori</em> this would have type <code>Pandoc -&gt; IO Pandoc</code>, but
since we want to use it from Hakyll I’ve already inserted a call to
<code>unsafeCompiler</code> in the correct place.</p>
<p>Further, the above code checks whether the block has an explicit
language attached to it and, if not, leaves it alone; this was suggested
by <a href="https://old.reddit.com/r/haskell/comments/10ilrui/pygmentising_hakylls_syntax_highlighting/j5fih5h/">LSLeary</a> on Reddit. If you want to have a single <code>div</code> class for
every code block—say, for some custom CSS—then you can replace</p>
<div class="highlight"><pre><span></span><span class="w">  </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">lang</span><span class="p">)</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">    </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">unsafeCompiler</span><span class="w"> </span><span class="p">(</span><span class="n">callPygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="n">body</span><span class="p">)</span>
</pre></div>

<p>with</p>
<div class="highlight"><pre><span></span><span class="w">  </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="n">listToMaybe</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">mbLang</span><span class="p">,</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kr">do</span>
<span class="w">    </span><span class="kr">let</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="p">(</span><span class="n">fromMaybe</span><span class="w"> </span><span class="s">&quot;text&quot;</span><span class="w"> </span><span class="n">mbLang</span><span class="p">)</span>
<span class="w">    </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">unsafeCompiler</span><span class="w"> </span><span class="p">(</span><span class="n">callPygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="n">body</span><span class="p">)</span>
</pre></div>

<h2 id="hakyll">Hakyll</h2>
<p>Thankfully, integrating <code>pygmentsHighlight</code> into Hakyll is not very
complicated either. In addition to the normal <code>pandocCompiler</code> or
<code>pandocCompilerWith</code> functions that you are probably already using,
there is also <a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM">pandocCompilerWithTransformM</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">pandocCompilerWithTransformM</span>
<span class="w">  </span><span class="ow">::</span><span class="w"> </span><span class="kt">ReaderOptions</span>
<span class="w">  </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">WriterOptions</span>
<span class="w">  </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="kt">Pandoc</span><span class="p">)</span>
<span class="w">  </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="p">)</span>
</pre></div>

<p>Basically, in additions to reader and writer options, it also takes a
monadic transformation of pandoc’s AST and builds an appropriate
<code>Compiler</code> from that.</p>
<div class="highlight"><pre><span></span><span class="c1">-- import Hakyll</span>
<span class="c1">-- import Text.Pandoc.Options</span>

<span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="p">)</span>
<span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">=</span>
<span class="w">  </span><span class="n">pandocCompilerWithTransformM</span>
<span class="w">    </span><span class="n">defaultHakyllReaderOptions</span>
<span class="w">    </span><span class="n">defaultHakyllWriterOptions</span>
<span class="w">    </span><span class="n">pygmentsHighlight</span>
</pre></div>

<p>The <code>myPandocCompiler</code> function can now be used as any other compiler;
for example:</p>
<div class="highlight"><pre><span></span><span class="nf">main</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="nb">()</span>
<span class="nf">main</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">hakyll</span><span class="w"> </span><span class="kr">do</span>
<span class="w">  </span><span class="c1">-- …</span>
<span class="w">  </span><span class="n">match</span><span class="w"> </span><span class="s">&quot;posts/**.md&quot;</span><span class="w"> </span><span class="kr">do</span>
<span class="w">    </span><span class="n">route</span><span class="w"> </span><span class="p">(</span><span class="n">setExtension</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="p">)</span>
<span class="w">    </span><span class="n">compile</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="n">myPandocCompiler</span>
<span class="w">          </span><span class="o">&gt;&gt;=</span><span class="w"> </span><span class="n">loadAndApplyTemplate</span><span class="w"> </span><span class="s">&quot;templates/default.html&quot;</span><span class="w"> </span><span class="n">defaultContext</span>
<span class="w">          </span><span class="o">&gt;&gt;=</span><span class="w"> </span><span class="n">relativizeUrls</span>
<span class="w">  </span><span class="c1">-- …</span>
</pre></div>

<p>For a full working example, see <a href="https://github.com/slotThe/slotThe.github.io/blob/main/site.hs#L87">my configuration</a>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>That’s it! To my eyes, syntax highlighting looks much better now, and
on the way I—and perhaps you as well—even learned a little bit about how
pandoc internally represents its documents. Time well spent. As I said
in the beginning, in principle one could swap out <code>pygmentize</code> for any
other syntax highlighter that can produce HTML. However, for me these
results are good enough that I will probably not try out every tool
under the sun, chasing that ever present epsilon of highlighting cases
which I still don’t agree with—at least for now.</p>
    </section>
</article>
]]></summary>
</entry>

</feed>

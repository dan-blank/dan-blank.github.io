<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tony Zorman – Blog</title>
    <link href="https://tony-zorman.com/atom-haskell.xml" rel="self" />
    <link href="https://tony-zorman.com" />
    <id>https://tony-zorman.com/atom-haskell.xml</id>
    <author>
        <name>Tony Zorman</name>
        <email>tonyzorman@mailbox.org</email>
    </author>
    <updated>2023-01-27T00:00:00Z</updated>
    <entry>
    <title>Using Sidenotes with Hakyll</title>
    <link href="https://tony-zorman.com/posts/2023-01-27-block-sidenotes.html" />
    <id>https://tony-zorman.com/posts/2023-01-27-block-sidenotes.html</id>
    <published>2023-01-27T00:00:00Z</published>
    <updated>2023-01-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2023-01-27
      
        | <a title="All pages tagged 'haskell'." href="/tags/haskell.html">haskell</a>
      
    </section>
    <section>
      
        
      
        <p></p>
I’ve become quite enamoured with sidenotes recently, and so of course
this website now has them as well! Thankfully, the integration with
pandoc and Hakyll is quite straightforward, because other people have
already done the hard work. Depending on your use-case, however, the
existing libraries might not entirely fit the bill; for example, by
default blocks that are more complicated than just paragraphs of pure
text don’t work. In this post, I’d like to explain an alternative
approach of integrating sidenotes into pandoc, which does enable the use
of these features.
<!--more-->
<h1 id="introduction">Introduction</h1>
<p></p>
If you don’t know: sidenotes are footnotes, just on the side of the
page!<!--
--><span class="sidenote-wrapper"><label for="sn-0" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-0" class="margin-toggle" /><span class="sidenote">For example, this is one.</span></span>
 More specifically they are footnotes placed inside of the
margins, in order to avoid having to click or scroll, breaking the flow
of reading—a flick of the eyes is enough. This is very convenient,
especially for longer entries with lots of asides that don’t necessarily
fit the flow of the article. However, because websites are dynamic in
size, a fallback option should be provided in case the margins are too
small/nonexistent. In most cases, this amount to making sidenotes
clickable again and, in one way or another, showing their content once
clicked.
<p></p>
Gwern Branwen has written about many different sidenote implementations
<a href="https://gwern.net/Sidenotes">here</a>. I settled on <a href="https://github.com/edwardtufte/tufte-css">Tufte CSS</a>,
mainly because it seemed to be the most popular non-JS solution. Plus,
there is the fantastic <a href="https://hackage.haskell.org/package/pandoc-sidenote">pandoc-sidenote</a>, which
provides an appropriate pandoc filter. After extracting the relevant
CSS into <a href="https://github.com/slotThe/slotThe.github.io/blob/main/css/sidenotes.css">sidenotes.css</a> and plugging the exported
<code>usingSidenotes</code> function into my pandoc compiler,<!--
--><span class="sidenote-wrapper"><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle" /><span class="sidenote">Just like you would expect:
<div class="highlight"><pre><span></span><span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="p">)</span>
<span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">=</span>
<span class="w">  </span><span class="n">pandocCompilerWithTransformM</span>
<span class="w">    </span><span class="n">defaultHakyllReaderOptions</span>
<span class="w">    </span><span class="n">myWriter</span>
<span class="w">    </span><span class="p">(</span><span class="w"> </span><span class="n">pygmentsHighlight</span><span class="w"> </span><span class="c1">-- syntax highlight</span>
<span class="w">    </span><span class="o">.</span><span class="w"> </span><span class="n">usingSidenotes</span><span class="w">    </span><span class="c1">-- sidenotes</span>
<span class="w">    </span><span class="o">.</span><span class="w"> </span><span class="n">addSectionLinks</span><span class="w">   </span><span class="c1">-- link on hover</span>
<span class="w">    </span><span class="p">)</span>
</pre></div>
</span></span>
 things just
worked!
<p></p>
There is but one problem with this setup: paragraphs. A sidenote
roughly looks like the following:
<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sidenote-wrapper&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;sn-NAME&quot;</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;margin-toggle sidenote-number&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;sn-NAME&quot;</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;margin-toggle&quot;</span><span class="p">/&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sidenote&quot;</span><span class="p">&gt;</span>
    SIDENOTE
  <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</pre></div>

<p></p>
As Chris MacKay—a Tufte CSS contributor—helpfully explains in an
<a href="https://github.com/edwardtufte/tufte-css/issues/93#issuecomment-234316022">issue</a>, spans officially don’t play nice with
paragraphs:
<blockquote>
<p></p>
so marginnotes and sidenotes, as they are implemented now, are
<code>&lt;span&gt;</code> elements inside paragraph <code>&lt;p&gt;</code> elements. Only inline
elements are allowed inside paragraphs per the HTML standard.
</blockquote>
<p></p>
I know what you’re thinking: people don’t usually let themselves be
hampered by standards, do they?<!--
--><span class="sidenote-wrapper"><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle" /><span class="sidenote">Just ask any person who’s ever worked on a window manager what
creative “interpretations” programs have of <a href="https://x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html">ICCCM</a> or <a href="https://en.wikipedia.org/wiki/Extended_Window_Manager_Hints">EWMH</a> :)</span></span>
 Alas, the <code>pandoc-sidenote</code> package
quite sensibly converts a given footnote into an approximation of the
above HTML by using pandoc’s native <code>Span</code> data constructor. Here is a
(heavily) simplified version of the relevant function.
<div class="highlight"><pre><span></span><span class="nf">filterInline</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Inline</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Inline</span>
<span class="nf">filterInline</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">  </span><span class="c1">-- A @Note@ signifies a footnote.</span>
<span class="w">  </span><span class="kt">Note</span><span class="w"> </span><span class="n">blocks</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">    </span><span class="kr">let</span><span class="w"> </span><span class="c1">-- Note has a [Block], but Span needs [Inline]</span>
<span class="w">        </span><span class="n">content</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">coerceToInline</span><span class="w"> </span><span class="n">blocks</span>
<span class="w">     </span><span class="kr">in</span><span class="w"> </span><span class="kt">Span</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;sidenote-wrapper&quot;</span><span class="p">],</span><span class="w"> </span><span class="kt">[]</span><span class="p">)</span>
<span class="w">             </span><span class="p">[</span><span class="w"> </span><span class="kt">RawInline</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="s">&quot;&lt;label for …&quot;</span>
<span class="w">             </span><span class="p">,</span><span class="w"> </span><span class="kt">RawInline</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="s">&quot;&lt;input type …&quot;</span>
<span class="w">             </span><span class="p">,</span><span class="w"> </span><span class="kt">Span</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;sidenote&quot;</span><span class="p">],</span><span class="w"> </span><span class="kt">[]</span><span class="p">)</span><span class="w"> </span><span class="n">content</span>
<span class="w">             </span><span class="p">]</span>
<span class="w">  </span><span class="n">inline</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">inline</span>
</pre></div>

<p></p>
Now, pandoc very much does <em>not</em> want you to put any kind of block
inside of its <code>Span</code>s—that’s why its type is
<div class="highlight"><pre><span></span><span class="kt">Span</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Attr</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Inline</span>
</pre></div>

<p></p>
Notice the absence of a <code>[Block]</code> argument. This is why
<code>coerceToInline</code> exists, which tries to convert as many blocks as it can
to inline elements.
<div class="highlight"><pre><span></span><span class="nf">coerceToInline</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span>
<span class="nf">coerceToInline</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">concatMap</span><span class="w"> </span><span class="n">deBlock</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">walk</span><span class="w"> </span><span class="n">deNote</span>
<span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">deBlock</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Block</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span>
<span class="w">  </span><span class="n">deBlock</span><span class="w"> </span><span class="p">(</span><span class="kt">Plain</span><span class="w">     </span><span class="n">ls</span><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">ls</span>
<span class="w">  </span><span class="c1">-- Simulate paragraphs with double LineBreak</span>
<span class="w">  </span><span class="n">deBlock</span><span class="w"> </span><span class="p">(</span><span class="kt">Para</span><span class="w">      </span><span class="n">ls</span><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">ls</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="n">newline</span>
<span class="w">  </span><span class="c1">-- See extension: line_blocks</span>
<span class="w">  </span><span class="n">deBlock</span><span class="w"> </span><span class="p">(</span><span class="kt">LineBlock</span><span class="w"> </span><span class="n">lss</span><span class="w">   </span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">intercalate</span><span class="w"> </span><span class="p">[</span><span class="kt">LineBreak</span><span class="p">]</span><span class="w"> </span><span class="n">lss</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="n">newline</span>
<span class="w">  </span><span class="c1">-- Pretend RawBlock is RawInline (might not work!)</span>
<span class="w">  </span><span class="c1">-- Consider: raw &lt;div&gt; now inside RawInline... what happens?</span>
<span class="w">  </span><span class="n">deBlock</span><span class="w"> </span><span class="p">(</span><span class="kt">RawBlock</span><span class="w"> </span><span class="n">fmt</span><span class="w"> </span><span class="n">str</span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="p">[</span><span class="kt">RawInline</span><span class="w"> </span><span class="n">fmt</span><span class="w"> </span><span class="n">str</span><span class="p">]</span>
<span class="w">  </span><span class="c1">-- lists, blockquotes, headers, hrs, and tables are all omitted</span>
<span class="w">  </span><span class="c1">-- Think they shouldn't be? I'm open to sensible PR's.</span>
<span class="w">  </span><span class="n">deBlock</span><span class="w"> </span><span class="kr">_</span><span class="w">                  </span><span class="ow">=</span><span class="w"> </span><span class="kt">[]</span>

<span class="w">  </span><span class="n">deNote</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Inline</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Inline</span>
<span class="w">  </span><span class="n">deNote</span><span class="w"> </span><span class="p">(</span><span class="kt">Note</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Str</span><span class="w"> </span><span class="s">&quot;&quot;</span>
<span class="w">  </span><span class="n">deNote</span><span class="w"> </span><span class="n">x</span><span class="w">        </span><span class="ow">=</span><span class="w"> </span><span class="n">x</span>
</pre></div>

<p></p>
The <code>coerceToInline</code> function behaves sensibly with respect to the
simplest kinds of blocks, but already mentions that the <code>RawBlock → RawInline</code> transformation may have some caveats. For example,
<a href="https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html">prerendering code blocks</a> puts one in exactly such a
“now we have a <code>&lt;div&gt;</code> tag inside of a <code>RawInline</code> element” situation.
Well, what happens?
<span class="sidenote-wrapper">
<label for="sn-2" class="margin-toggle sidenote-number"></label>
<input type="checkbox" id="sn-2" class="margin-toggle" />
<p><span class="sidenote">Now simulating <code>pandoc-sidenode</code>s behaviour, the following is a piece of code <em>in the sidenote:</em>
<div class="highlight"><pre><span></span><span class="nf">a</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Int</span> <span class="nf">
a</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">42</span> </pre></div>
</span></p>
</span>
<p></p>
This is the next line in the main document; the above code block was
supposed to be in the relevant sidenote, but “spilled” into the text
instead. This is obviously not what we want.
<p></p>
The documentation mentions other things that are missing, and that pull
requests are welcome, but for many blocks there just is no good
alternative. For example, code blocks and inline code serve very
different purposes most of the time. Pandoc itself has a
<a href="https://hackage.haskell.org/package/pandoc-3.0.1/docs/Text-Pandoc-Shared.html#v:blocksToInlines">function</a> of the same name that
attempts to convert tables, figures, and the like, but this also yields
some surprising behaviour when used instead of <code>pandoc-sidenote</code>s
variant.<!--
--><span class="sidenote-wrapper"><label for="sn-3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-3" class="margin-toggle" /><span class="sidenote">Whereas now, things like
<ul>
<li><p></p>

tables
<table style="width:66%;">
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 26%" />
</colgroup>
<thead>
<tr class="header">
<th>Fruit</th>
<th>Price</th>
<th>Advantages</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Oranges</td>
<td>$2.10</td>
<td><ul>
<li>cures scurvy</li>
<li>tasty</li>
</ul></td>
</tr>
</tbody>
</table></li>
<li><p></p>

quotes
<blockquote>
<p></p>
they said that …
</blockquote></li>
<li><p></p>

display maths
<p></p>

<span class="math display">\[
\int^{a, b} \mathcal{C}(a \otimes b, {-}) \cdot Fa \otimes Gb
\]</span></li>
</ul>
<p></p>
and the like are no problem at all!</span></span>
<p></p>
So what to do? Well, life wouldn’t be fun if we didn’t at least try to
hack our way around a standard, would it?
<h1 id="rewriting-pandoc-sidenote">Rewriting <code>pandoc-sidenote</code></h1>
<p></p>
As I’ve learned while <a href="https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html">writing</a> about using
<code>pygmentize</code> to syntax highlight code for this site, pandoc has quite
good support for changing its AST in creative ways. A strategy unfolds:
find every <code>Note</code> block in a document, somehow render its contents, and
create a <code>RawBlock "html"</code> node instead of using pandoc’s built in
<code>Span</code> .
<p></p>
For rendering HTML, pandoc has a
<a href="https://hackage.haskell.org/package/pandoc-3.0.1/docs/Text-Pandoc-Writers.html#v:writeHtml5String">writeHtml5String</a> function, which is
conveniently wrapped by Hakyll in
<a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:writePandocWith">writePandocWith</a>:
<div class="highlight"><pre><span></span><span class="c1">-- | Write a document (as HTML) using pandoc, with the supplied options</span>
<span class="nf">writePandocWith</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">WriterOptions</span><span class="w">  </span><span class="c1">-- ^ Writer options for pandoc</span>
<span class="w">                </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Item</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w">    </span><span class="c1">-- ^ Document to write</span>
<span class="w">                </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="w">    </span><span class="c1">-- ^ Resulting HTML</span>
</pre></div>

<p></p>
Importantly, rendering takes some <code>WriterOptions</code>; since we don’t want
to mess around with changing pure HTML afterwards, this is quite
important for us.
<p></p>
Writing this filter now essentially works by the same strategy outlined
in the last post: look through the Haddocks to find the types that we
want, <a href="https://aphyr.com/posts/342-typing-the-technical-interview">seize some meaningless functions from the void, and imbue them
with meaning</a>. The relevant bits
from pandoc’s internal types are the following.
<div class="highlight"><pre><span></span><span class="kr">data</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="kt">Meta</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>

<span class="kr">data</span><span class="w"> </span><span class="kt">Block</span>
<span class="w">    </span><span class="ow">=</span><span class="w"> </span><span class="kt">Plain</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span><span class="w">       </span><span class="c1">-- ^ Plain text, not a paragraph</span>
<span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="kt">Para</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span><span class="w">        </span><span class="c1">-- ^ Paragraph</span>
<span class="w">    </span><span class="c1">-- …</span>
<span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="kt">RawBlock</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="kt">Text</span><span class="w"> </span><span class="c1">-- ^ Raw block</span>

<span class="kr">data</span><span class="w"> </span><span class="kt">Inline</span>
<span class="w">    </span><span class="ow">=</span><span class="w"> </span><span class="kt">Str</span><span class="w"> </span><span class="kt">Text</span><span class="w">             </span><span class="c1">-- ^ Text (string)</span>
<span class="w">    </span><span class="c1">-- …</span>
<span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="kt">Note</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span><span class="w">         </span><span class="c1">-- ^ Footnote or endnote</span>
</pre></div>

<p></p>
While this document is <em>not</em> a literate Haskell file, the following is
still here for convenience, in case you are left wondering where some of
the functions come from.
<div class="highlight"><pre><span></span><span class="cm">{-# LANGUAGE BangPatterns             #-}</span>
<span class="cm">{-# LANGUAGE LambdaCase               #-}</span>
<span class="cm">{-# LANGUAGE OverloadedStrings        #-}</span>
<span class="cm">{-# LANGUAGE StandaloneKindSignatures #-}</span>

<span class="kr">import</span><span class="w"> </span><span class="nn">Control.Monad.State</span><span class="w"> </span><span class="p">(</span><span class="kt">State</span><span class="p">,</span><span class="w"> </span><span class="nf">foldM</span><span class="p">,</span><span class="w"> </span><span class="nf">get</span><span class="p">,</span><span class="w"> </span><span class="nf">modify'</span><span class="p">,</span><span class="w"> </span><span class="nf">runState</span><span class="p">)</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Data.Kind</span><span class="w"> </span><span class="p">(</span><span class="kt">Type</span><span class="p">)</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Data.Text</span><span class="w"> </span><span class="p">(</span><span class="kt">Text</span><span class="p">)</span>
<span class="kr">import</span><span class="w"> </span><span class="k">qualified</span><span class="w"> </span><span class="nn">Data.Text</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">T</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Hakyll</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="p">(</span><span class="o">..</span><span class="p">),</span><span class="w"> </span><span class="nf">writePandocWith</span><span class="p">)</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Text.Pandoc.Definition</span><span class="w"> </span><span class="p">(</span><span class="kt">Block</span><span class="w"> </span><span class="p">(</span><span class="o">..</span><span class="p">),</span><span class="w"> </span><span class="kt">Inline</span><span class="w"> </span><span class="p">(</span><span class="o">..</span><span class="p">),</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="p">(</span><span class="o">..</span><span class="p">))</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Text.Pandoc.Options</span><span class="w"> </span><span class="p">(</span><span class="kt">WriterOptions</span><span class="p">)</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Text.Pandoc.Shared</span><span class="w"> </span><span class="p">(</span><span class="nf">tshow</span><span class="p">)</span>
<span class="kr">import</span><span class="w"> </span><span class="nn">Text.Pandoc.Walk</span><span class="w"> </span><span class="p">(</span><span class="nf">walkM</span><span class="p">)</span>
</pre></div>

<p></p>
Rendering the actual sidenote isn’t very complicated, and amounts to
picking out the <code>Note</code> constructor, rendering it, and putting everything
back together.<!--
--><span class="sidenote-wrapper"><label for="sn-4" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-4" class="margin-toggle" /><span class="sidenote">The <code>Sidenote</code> type you are seeing is just some alias for <code>State</code>,
which keeps track of the sidenote number, as well as the supplied
<code>WriterOption</code>s; nothing fancy.</span></span>
<div class="highlight"><pre><span></span><span class="nf">renderSidenote</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span><span class="w">            </span><span class="c1">-- ^ Inlines from a single @Note@</span>
<span class="w">               </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Sidenote</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
<span class="nf">renderSidenote</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">go</span><span class="w"> </span><span class="kt">[]</span>
<span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">go</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="kt">Inline</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Sidenote</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
<span class="w">  </span><span class="n">go</span><span class="w"> </span><span class="n">inlines</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">    </span><span class="kt">[]</span><span class="w">           </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="p">[</span><span class="kt">Plain</span><span class="w"> </span><span class="n">inlines</span><span class="p">]</span>
<span class="w">    </span><span class="kt">Note</span><span class="w"> </span><span class="n">bs</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="n">xs</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kr">do</span><span class="w"> </span><span class="n">block</span><span class="w"> </span><span class="ow">&lt;-</span><span class="w"> </span><span class="n">renderBlock</span><span class="w"> </span><span class="n">bs</span>
<span class="w">                       </span><span class="p">([</span><span class="kt">Plain</span><span class="w"> </span><span class="n">inlines</span><span class="p">,</span><span class="w"> </span><span class="n">block</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">go</span><span class="w"> </span><span class="kt">[]</span><span class="w"> </span><span class="n">xs</span>
<span class="w">    </span><span class="n">b</span><span class="w">       </span><span class="kt">:</span><span class="w"> </span><span class="n">xs</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">go</span><span class="w"> </span><span class="p">(</span><span class="n">inlines</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="p">[</span><span class="n">b</span><span class="p">])</span><span class="w"> </span><span class="n">xs</span>

<span class="w">  </span><span class="n">renderBlock</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Sidenote</span><span class="w"> </span><span class="kt">Block</span>
<span class="w">  </span><span class="n">renderBlock</span><span class="w"> </span><span class="n">blocks</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kr">do</span>
<span class="w">    </span><span class="c1">-- Update sidenote counter and get the `WriterOption's.</span>
<span class="w">    </span><span class="kt">SNS</span><span class="w"> </span><span class="n">w</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="ow">&lt;-</span><span class="w"> </span><span class="n">get</span><span class="w"> </span><span class="o">&lt;*</span><span class="w"> </span><span class="n">modify'</span><span class="w"> </span><span class="p">(</span><span class="nf">\</span><span class="n">sns</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">sns</span><span class="p">{</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="n">sns</span><span class="w"> </span><span class="p">})</span>
<span class="w">    </span><span class="n">pure</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="c1">-- … all the opening html stuff</span>
<span class="w">                             </span><span class="n">writePandocWith</span><span class="w"> </span><span class="n">w</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="w"> </span><span class="p">(</span><span class="kt">Pandoc</span><span class="w"> </span><span class="n">mempty</span><span class="w"> </span><span class="n">blocks</span><span class="p">))</span>
<span class="w">                             </span><span class="c1">-- … all the closing html stuff</span>
</pre></div>

<p></p>
Finding notes is a bit more finicky, since they could potentially occur
in a lot of places. Right now, for obvious reasons, I’ve settled on
covering all cases that currently occur on this website. Importantly,
we need to be a bit careful about inserting newlines for paragraphs (and
when to omit this). This is because <code>Note</code>s are actually inline
elements, and so we are replacing a single <code>Block</code> by a list of
<code>Block</code>s, which incurs some additional formatting.
<div class="highlight"><pre><span></span><span class="nf">mkSidenote</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Sidenote</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
<span class="nf">mkSidenote</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">foldM</span><span class="w"> </span><span class="p">(</span><span class="nf">\</span><span class="n">acc</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">acc</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">single</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="kt">[]</span>
<span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">single</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Block</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Sidenote</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
<span class="w">  </span><span class="n">single</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">    </span><span class="c1">-- Simulate a paragraph by inserting a dummy block; this is needed</span>
<span class="w">    </span><span class="c1">-- in case two consecutive paragraphs have sidenotes, or a paragraph</span>
<span class="w">    </span><span class="c1">-- doesn't have one at all.</span>
<span class="w">    </span><span class="kt">Para</span><span class="w"> </span><span class="n">inlines</span><span class="w">         </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="kt">Para</span><span class="w"> </span><span class="p">[</span><span class="kt">Str</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="p">]</span><span class="w"> </span><span class="kt">:</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">renderSidenote</span><span class="w"> </span><span class="n">inlines</span>
<span class="w">    </span><span class="kt">OrderedList</span><span class="w"> </span><span class="n">attrs</span><span class="w"> </span><span class="n">bs</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="kt">:[]</span><span class="p">)</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">OrderedList</span><span class="w"> </span><span class="n">attrs</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">traverse</span><span class="w"> </span><span class="n">mkSidenote</span><span class="w"> </span><span class="n">bs</span>
<span class="w">    </span><span class="kt">BulletList</span><span class="w">        </span><span class="n">bs</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="kt">:[]</span><span class="p">)</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">BulletList</span><span class="w">        </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">traverse</span><span class="w"> </span><span class="n">mkSidenote</span><span class="w"> </span><span class="n">bs</span>
<span class="w">    </span><span class="n">block</span><span class="w">                </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="p">[</span><span class="n">block</span><span class="p">]</span>
</pre></div>

<p></p>
Putting everything together, we apply this transformation to every block
in a document:
<div class="highlight"><pre><span></span><span class="nf">usingSidenotes</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">WriterOptions</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Pandoc</span>
<span class="nf">usingSidenotes</span><span class="w"> </span><span class="n">writer</span><span class="w"> </span><span class="p">(</span><span class="kt">Pandoc</span><span class="w"> </span><span class="n">meta</span><span class="w"> </span><span class="n">blocks</span><span class="p">)</span><span class="w"> </span><span class="ow">=</span>
<span class="w">  </span><span class="kt">Pandoc</span><span class="w"> </span><span class="n">meta</span><span class="w"> </span><span class="p">(</span><span class="n">walkBlocks</span><span class="w"> </span><span class="p">(</span><span class="kt">SNS</span><span class="w"> </span><span class="n">writer</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="n">blocks</span><span class="p">)</span>
<span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">walkBlocks</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">SidenoteState</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
<span class="w">  </span><span class="n">walkBlocks</span><span class="w"> </span><span class="n">sns</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">    </span><span class="kt">[]</span><span class="w">       </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">[]</span>
<span class="w">    </span><span class="p">(</span><span class="n">b</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="n">bs</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b'</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">walkBlocks</span><span class="w"> </span><span class="n">s'</span><span class="w"> </span><span class="n">bs</span>
<span class="w">     </span><span class="kr">where</span><span class="w"> </span><span class="p">(</span><span class="n">b'</span><span class="p">,</span><span class="w"> </span><span class="n">s'</span><span class="p">)</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">runState</span><span class="w"> </span><span class="p">(</span><span class="n">walkM</span><span class="w"> </span><span class="n">mkSidenote</span><span class="w"> </span><span class="p">[</span><span class="n">b</span><span class="p">])</span><span class="w"> </span><span class="n">sns</span>
</pre></div>

<p></p>
This can now be used much like the <code>usingSidenotes</code> function from
<code>pandoc-sidenote</code>, only that it needs to know your <code>WriterOption</code>s.
More importantly, it should be the last of the transformations that you
do to pandoc’s AST, since <code>usingSidenotes</code> completely renders the
footnote, which is not what you want in case you—like me—do other
creative transformations, such as separately generating HTML for
<code>CodeBlock</code>s. In my configuration, I now have
<div class="highlight"><pre><span></span><span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="p">)</span>
<span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">=</span>
<span class="w">  </span><span class="n">pandocCompilerWithTransformM</span>
<span class="w">    </span><span class="n">defaultHakyllReaderOptions</span>
<span class="w">    </span><span class="n">myWriter</span>
<span class="w">    </span><span class="p">(</span><span class="n">pure</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">usingSidenotes</span><span class="w"> </span><span class="n">myWriter</span><span class="w"> </span><span class="o">&lt;=&lt;</span><span class="w"> </span><span class="n">pygmentsHighlight</span><span class="w">  </span><span class="o">.</span><span class="w"> </span><span class="n">addSectionLinks</span><span class="p">)</span>
</pre></div>

<p></p>
Tufte CSS needs to be changed minimally to support this extended
functionality, but thankfully Said Achmiz has already documented what
needs to be done <a href="https://github.com/edwardtufte/tufte-css/issues/93#issuecomment-671102819">here</a>. This is
already included in my <code>sidenotes.css</code>, so if you’re just copying that
then you should be fine.
<h1 id="conclusion">Conclusion</h1>
<p></p>
Being perfectly honest, I’m not very satisfied with this solution. It
does work, but pre-rendering everything and not using pandoc’s built in
constructors feels like a big hack. More importantly though, since what
I’ve done here amounts to a complete rewrite,<!--
--><span class="sidenote-wrapper"><label for="sn-5" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-5" class="margin-toggle" /><span class="sidenote">Not only that, but it’s almost certainly also a regression in
certain aspects; even after handling of margin notes is restored,
which I’ve completely ignored for now.</span></span>
 I can’t contribute
this upstream—at least I don’t see a way. I sort of don’t want to
advertise this solution as an alternative to <code>pandoc-sidenote</code>, as that
package handles the concept of sidenotes in a much better way,
philosophically. Hence, there is no standalone repository for
<a href="https://github.com/slotThe/slotThe.github.io/blob/main/src/Sidenote.hs">Sidenote.hs</a> and <a href="https://github.com/slotThe/slotThe.github.io/blob/main/css/sidenotes.css">sidenotes.css</a> at
this point.
<p></p>
Really, I would be delighted if someone told me that I just used
<code>pandoc-sidenote</code> (or another program involved) wrongly, and this is
actually very easy to achieve using <code>${METHOD}</code>. Until then, I’ll
continue to be blissfully unaware of HTML standards :)
    </section>
</article>
]]></summary>
</entry>
<entry>
    <title>Pygmentising Hakyll's Syntax Highlighting</title>
    <link href="https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html" />
    <id>https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html</id>
    <published>2023-01-21T00:00:00Z</published>
    <updated>2023-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <section class="header">
      Posted on 2023-01-21
      
        | <a title="All pages tagged 'haskell'." href="/tags/haskell.html">haskell</a>
      
    </section>
    <section>
      
        
      
        <p></p>
By default, Hakyll uses pandoc to generate syntax highlighting for all
kinds of different programming languages. However, even in simple
examples the HTML this produces is unsatisfactory. Thankfully, the two
programs are almost infinitely customisable, and changing pretty much
any setting doesn’t usually involve a lot of work—this is no exception.
Using <code>pygmentize</code> as an example, I will show you how you can swap out
pandoc’s native syntax highlighting with pretty much any third party
tool that can output HTML.
<!--more-->
<h1 id="the-problem">The Problem</h1>
<p></p>
Pandoc uses the <a href="https://hackage.haskell.org/package/skylighting">skylighting</a> library to generate syntax highlighting
for a given block of code. Skylighting, in turn, uses <a href="https://docs.kde.org/stable5/en/kate/katepart/highlight.html">KDE XML syntax
definitions</a> for the respective tokenisers. However, even for simple
examples I don’t agree with the HTML this generates. Consider the
following Haskell code block.
<div class="highlight"><pre><span></span><span class="nf">fibs</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">[</span><span class="kt">Integer</span><span class="p">]</span>
<span class="nf">fibs</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="n">scanl'</span><span class="w"> </span><span class="p">(</span><span class="o">+</span><span class="p">)</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">fibs</span>
</pre></div>

<p></p>
Pandoc would generate something like the following:
<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sourceCode&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;cb1&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">pre</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sourceCode haskell&quot;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">code</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sourceCode haskell&quot;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;cb1-1&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;#cb1-1&quot;</span> <span class="na">aria-hidden</span><span class="o">=</span><span class="s">&quot;true&quot;</span> <span class="na">tabindex</span><span class="o">=</span><span class="s">&quot;-1&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ot&quot;</span><span class="p">&gt;</span>    fibs :: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> [<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dt&quot;</span><span class="p">&gt;</span>Integer <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>]
      <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;cb1-2&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;#cb1-2&quot;</span> <span class="na">aria-hidden</span><span class="o">=</span><span class="s">&quot;true&quot;</span> <span class="na">tabindex</span><span class="o">=</span><span class="s">&quot;-1&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>    fibs
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ot&quot;</span><span class="p">&gt;</span>= <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dv&quot;</span><span class="p">&gt;</span>0 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;op&quot;</span><span class="p">&gt;</span>: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        scanl<span class="ni">&amp;#39;</span> (<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;op&quot;</span><span class="p">&gt;</span>+ <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>) <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;dv&quot;</span><span class="p">&gt;</span>1
        <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> fibs
      <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>

<p></p>
One can already see a few things wrong with this: (i) in the type
signature, the name of the list is smushed together with the separating
double colon (worse: it’s just in the “other” syntax class), (ii) in the
actual definition, <code>fibs</code> isn’t assigned any class at all, and (iii) the
assignment operator is also in the “other” class, instead of something
related to it being a built in operator! As one can imagine, this only
gets worse as snippets get more complicated.
<p></p>
These kinds of issues, combined with the fact that certain
languages—like Emacs Lisp—don’t have any syntax definitions at all,
annoyed me enough to look for an alternative way to highlight code on
this website.<!--
--><span class="sidenote-wrapper"><label for="sn-0" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-0" class="margin-toggle" /><span class="sidenote">All of this work for a mostly greyscale theme!</span></span>
 There are of course many options to choose from; I
went with <code>pygmentize</code>, solely because I already had it installed. All
that’s left is to tell pandoc and Hakyll to make use of it. As
mentioned, this thankfully doesn’t turn out to be very difficult!
<h1 id="playing-with-pygmentize">Playing with <code>pygmentize</code></h1>
<p></p>
Having never used <code>pygmentize</code> as a command line utility,<!--
--><span class="sidenote-wrapper"><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle" /><span class="sidenote">So far, the only interaction I had with the program was through
the excellent <a href="https://ctan.org/pkg/minted?lang=en">minted</a> LaTeX package.</span></span>
 I expected
this to take some work—possibly involving Python <em>shudder</em>—but all of
the necessary pieces are already present in the CLI. First up, the <code>-f</code>
option specifies the formatter to use, which will decide the shape of
the output.
<div class="highlight"><pre><span></span><span class="gp">$ </span>pygmentize<span class="w"> </span>-L<span class="w"> </span>formatter<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>html
<span class="go">* html:</span>
<span class="go">    Format tokens as HTML 4 ``&lt;span&gt;`` tags within a ``&lt;pre&gt;`` tag, wrapped in a ``&lt;div&gt;`` tag. The ``&lt;div&gt;``'s CSS class can be set by the `cssclass` option. (filenames *.html, *.htm)</span>
</pre></div>

<p></p>
We can test how this highlighting looks straight away; executing
<div class="highlight"><pre><span></span><span class="gp">$ </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;fibs :: [Integer]\nfibs = 0 : scanl' (+) 1 fibs&quot;</span><span class="w"> </span><span class="se">\</span>
<span class="w">   </span><span class="se">\ </span><span class="p">|</span><span class="w"> </span>pygmentize<span class="w"> </span>-l<span class="w"> </span>haskell<span class="w"> </span>-f<span class="w"> </span>html
</pre></div>

<p></p>
produces an HTML output along the lines of
<div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;nf&quot;</span><span class="p">&gt;</span>fibs <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ow&quot;</span><span class="p">&gt;</span>:: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>[<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;kt&quot;</span><span class="p">&gt;</span>Integer <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>] <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;nf&quot;</span><span class="p">&gt;</span>fibs <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;ow&quot;</span><span class="p">&gt;</span>= <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;mi&quot;</span><span class="p">&gt;</span>0 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;kt&quot;</span><span class="p">&gt;</span>: <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">&gt;</span>scanl<span class="ni">&amp;#39;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>(<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;o&quot;</span><span class="p">&gt;</span>+ <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;p&quot;</span><span class="p">&gt;</span>) <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;mi&quot;</span><span class="p">&gt;</span>1 <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="p">&gt;</span> <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;n&quot;</span><span class="p">&gt;</span>fibs <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>

<p></p>
This looks much better! The class names are kind of obtuse, but
<code>pygmentize</code> can also give you nicely annotated CSS styles for its
supported colour schemes. For example, the following is a small excerpt
of the output:
<div class="highlight"><pre><span></span><span class="gp">$ </span>pygmentize<span class="w"> </span>-S<span class="w"> </span>emacs<span class="w"> </span>-f<span class="w"> </span>html
<span class="go">…</span>
<span class="go">.nf { color: #00A000 }                    /* Name.Function */</span>
<span class="go">.ow { color: #AA22FF; font-weight: bold } /* Operator.Word */</span>
<span class="go">.kt { color: #00BB00; font-weight: bold } /* Keyword.Type */</span>
<span class="go">.w { color: #bbbbbb }                     /* Text.Whitespace */</span>
<span class="go">.c { color: #008800; font-style: italic } /* Comment */</span>
<span class="go">…</span>
</pre></div>

<p></p>
You can redirect this into a <code>pygments.css</code> file, link to it (e.g., from
your <code>default.html</code> template), and be on your way. The annotation also
makes it very easy to change that file after the fact, in case
<code>pygmentize</code> does not have the theme that you want.
<h1 id="integration">Integration</h1>
<p></p>
The idea of what we want to do is quite simple: for every code block in
a given post, shell out to <code>pygmentize</code>, and use its output to replace
the block, somehow making sure pandoc doesn’t touch it afterwards.
Let’s solve this step by step.
<h2 id="pandoc">Pandoc</h2>
<p></p>
Pandoc has an aptly named <code>Pandoc</code> type, which represents the internal
structure of a document.
<div class="highlight"><pre><span></span><span class="kr">data</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="kt">Meta</span><span class="w"> </span><span class="p">[</span><span class="kt">Block</span><span class="p">]</span>
</pre></div>

<p></p>
We’ll neglect the metadata for now and just look at the <code>Block</code>s;
specifically, we want to zoom in on two constructors that will give you
everything we need:
<div class="highlight"><pre><span></span><span class="kr">data</span><span class="w"> </span><span class="kt">Block</span>
<span class="w">  </span><span class="c1">-- Lots of other constructors omitted</span>
<span class="w">  </span><span class="ow">=</span><span class="w"> </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="kt">Attr</span><span class="w"> </span><span class="kt">Text</span><span class="w">   </span><span class="c1">-- ^ Code block (literal) with attributes</span>
<span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="kt">RawBlock</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="kt">Text</span><span class="w">  </span><span class="c1">-- ^ Raw block</span>

<span class="c1">-- | Attributes: identifier, classes, key-value pairs</span>
<span class="kr">type</span><span class="w"> </span><span class="kt">Attr</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="p">(</span><span class="kt">Text</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="kt">Text</span><span class="p">],</span><span class="w"> </span><span class="p">[(</span><span class="kt">Text</span><span class="p">,</span><span class="w"> </span><span class="kt">Text</span><span class="p">)])</span>

<span class="c1">-- | Formats for raw blocks</span>
<span class="kr">newtype</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">Format</span><span class="w"> </span><span class="kt">Text</span>
</pre></div>

<p></p>
To get a feeling for how these <code>CodeBlock</code>s look, again consider our
<code>fibs</code> example from above. By default, the corresponding <code>CodeBlock</code>
for this would look something like
<div class="highlight"><pre><span></span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;haskell&quot;</span><span class="p">],</span><span class="w"> </span><span class="kt">[]</span><span class="p">)</span>
<span class="w">          </span><span class="s">&quot;fibs :: [Integer]</span><span class="se">\n</span><span class="s">fibs = 0 : scanl' (+) 1 fibs&quot;</span>
</pre></div>

<p></p>
Importantly, the language (if any) is the first argument of the
<code>classes</code> field of <code>Attr</code>.
<p></p>
A strategy begins to form: look for all occurences of a <code>CodeBlock</code> in
the <code>Pandoc</code> type, and replace it with a <code>RawBlock "html"</code> such that it
isn’t touched anymore. Doing so will not pose very many
challenges—pandoc has really great capabilities for
<a href="https://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Walk.html">walking</a> its AST in order to facilitate exactly these
kinds of changes. Unsurprisingly, the <code>Walkable</code> class resides over all
things walkable; an abbreviated definition looks like this:
<div class="highlight"><pre><span></span><span class="kr">class</span><span class="w"> </span><span class="kt">Walkable</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="c1">-- | @walk f x@ walks the structure @x@ (bottom up) and replaces every</span>
<span class="w">  </span><span class="c1">-- occurrence of an @a@ with the result of applying @f@ to it.</span>
<span class="w">  </span><span class="n">walk</span><span class="w">  </span><span class="ow">::</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b</span>
<span class="w">  </span><span class="n">walk</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">runIdentity</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">walkM</span><span class="w"> </span><span class="p">(</span><span class="n">return</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="n">f</span><span class="p">)</span>

<span class="w">  </span><span class="c1">-- | A monadic version of 'walk'.</span>
<span class="w">  </span><span class="n">walkM</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="p">(</span><span class="kt">Monad</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="kt">Applicative</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="kt">Functor</span><span class="w"> </span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="ow">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="n">b</span>
</pre></div>

<p></p>
Specifically, as we’ll need to shell out to an external program, let us
restrict our attention to the more general <code>walkM</code> function here. There
is an instance
<div class="highlight"><pre><span></span><span class="kr">instance</span><span class="w"> </span><span class="kt">Walkable</span><span class="w"> </span><span class="kt">Block</span><span class="w"> </span><span class="kt">Pandoc</span>
</pre></div>

<p></p>
which will be all that we need. The necessary code now just
materialises in front of our eyes:<!--
--><span class="sidenote-wrapper"><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle" /><span class="sidenote">If all else fails, simply <a href="https://aphyr.com/posts/353-rewriting-the-technical-interview">trace the sigils in the air and give
them form</a>.</span></span>
<div class="highlight"><pre><span></span><span class="c1">-- {-# LANGUAGE BlockArguments    #-}</span>
<span class="c1">-- {-# LANGUAGE LambdaCase        #-}</span>
<span class="c1">-- {-# LANGUAGE OverloadedStrings #-}</span>
<span class="c1">-- {-# LANGUAGE ViewPatterns      #-}</span>
<span class="c1">--</span>
<span class="c1">-- import Data.Maybe (fromMaybe, listToMaybe)</span>
<span class="c1">-- import qualified Data.Text as T</span>
<span class="c1">-- import Hakyll</span>
<span class="c1">-- import System.Process (readProcess)</span>
<span class="c1">-- import Text.Pandoc.Definition (Block (CodeBlock, RawBlock), Pandoc)</span>
<span class="c1">-- import Text.Pandoc.Walk (walk, walkM)</span>

<span class="nf">pygmentsHighlight</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="kt">Pandoc</span>
<span class="nf">pygmentsHighlight</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">walkM</span><span class="w"> </span><span class="nf">\</span><span class="kr">case</span>
<span class="w">  </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">lang</span><span class="p">)</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">    </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">unsafeCompiler</span><span class="w"> </span><span class="p">(</span><span class="n">callPygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="n">body</span><span class="p">)</span>
<span class="w">  </span><span class="n">block</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">pure</span><span class="w"> </span><span class="n">block</span>
<span class="w"> </span><span class="kr">where</span>
<span class="w">  </span><span class="n">pygs</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">String</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">String</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="kt">String</span>
<span class="w">  </span><span class="n">pygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">readProcess</span><span class="w"> </span><span class="s">&quot;pygmentize&quot;</span><span class="w"> </span><span class="p">[</span><span class="s">&quot;-l&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">lang</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;-f&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="p">]</span>
</pre></div>

<p></p>
Notice how <em>a priori</em> this would have type <code>Pandoc -&gt; IO Pandoc</code>, but
since we want to use it from Hakyll I’ve already inserted a call to
<code>unsafeCompiler</code> in the correct place.
<p></p>
Further, the above code checks whether the block has an explicit
language attached to it and, if not, leaves it alone; this was suggested
by <a href="https://old.reddit.com/r/haskell/comments/10ilrui/pygmentising_hakylls_syntax_highlighting/j5fih5h/">LSLeary</a> on Reddit. If you want to have a single <code>div</code> class for
every code block—say, for some custom CSS—then you can replace
<div class="highlight"><pre><span></span><span class="w">  </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">lang</span><span class="p">)</span><span class="w"> </span><span class="kt">:</span><span class="w"> </span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span>
<span class="w">    </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">unsafeCompiler</span><span class="w"> </span><span class="p">(</span><span class="n">callPygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="n">body</span><span class="p">)</span>
</pre></div>

<p></p>
with
<div class="highlight"><pre><span></span><span class="w">  </span><span class="kt">CodeBlock</span><span class="w"> </span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="w"> </span><span class="n">listToMaybe</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">mbLang</span><span class="p">,</span><span class="w"> </span><span class="kr">_</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="n">body</span><span class="p">)</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kr">do</span>
<span class="w">    </span><span class="kr">let</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">unpack</span><span class="w"> </span><span class="p">(</span><span class="n">fromMaybe</span><span class="w"> </span><span class="s">&quot;text&quot;</span><span class="w"> </span><span class="n">mbLang</span><span class="p">)</span>
<span class="w">    </span><span class="kt">RawBlock</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="kt">T</span><span class="o">.</span><span class="n">pack</span><span class="w"> </span><span class="o">&lt;$&gt;</span><span class="w"> </span><span class="n">unsafeCompiler</span><span class="w"> </span><span class="p">(</span><span class="n">callPygs</span><span class="w"> </span><span class="n">lang</span><span class="w"> </span><span class="n">body</span><span class="p">)</span>
</pre></div>

<h2 id="hakyll">Hakyll</h2>
<p></p>
Thankfully, integrating <code>pygmentsHighlight</code> into Hakyll is not very
complicated either. In addition to the normal <code>pandocCompiler</code> or
<code>pandocCompilerWith</code> functions that you are probably already using,
there is also <a href="https://hackage.haskell.org/package/hakyll-4.15.1.1/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWithTransformM">pandocCompilerWithTransformM</a>:
<div class="highlight"><pre><span></span><span class="nf">pandocCompilerWithTransformM</span>
<span class="w">  </span><span class="ow">::</span><span class="w"> </span><span class="kt">ReaderOptions</span>
<span class="w">  </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">WriterOptions</span>
<span class="w">  </span><span class="ow">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="kt">Pandoc</span><span class="w"> </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="kt">Pandoc</span><span class="p">)</span>
<span class="w">  </span><span class="ow">-&gt;</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="p">)</span>
</pre></div>

<p></p>
Basically, in additions to reader and writer options, it also takes a
monadic transformation of pandoc’s AST and builds an appropriate
<code>Compiler</code> from that.
<div class="highlight"><pre><span></span><span class="c1">-- import Hakyll</span>
<span class="c1">-- import Text.Pandoc.Options</span>

<span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">Compiler</span><span class="w"> </span><span class="p">(</span><span class="kt">Item</span><span class="w"> </span><span class="kt">String</span><span class="p">)</span>
<span class="nf">myPandocCompiler</span><span class="w"> </span><span class="ow">=</span>
<span class="w">  </span><span class="n">pandocCompilerWithTransformM</span>
<span class="w">    </span><span class="n">defaultHakyllReaderOptions</span>
<span class="w">    </span><span class="n">defaultHakyllWriterOptions</span>
<span class="w">    </span><span class="n">pygmentsHighlight</span>
</pre></div>

<p></p>
The <code>myPandocCompiler</code> function can now be used as any other compiler;
for example:
<div class="highlight"><pre><span></span><span class="nf">main</span><span class="w"> </span><span class="ow">::</span><span class="w"> </span><span class="kt">IO</span><span class="w"> </span><span class="nb">()</span>
<span class="nf">main</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">hakyll</span><span class="w"> </span><span class="kr">do</span>
<span class="w">  </span><span class="c1">-- …</span>
<span class="w">  </span><span class="n">match</span><span class="w"> </span><span class="s">&quot;posts/**.md&quot;</span><span class="w"> </span><span class="kr">do</span>
<span class="w">    </span><span class="n">route</span><span class="w"> </span><span class="p">(</span><span class="n">setExtension</span><span class="w"> </span><span class="s">&quot;html&quot;</span><span class="p">)</span>
<span class="w">    </span><span class="n">compile</span><span class="w"> </span><span class="o">$</span><span class="w"> </span><span class="n">myPandocCompiler</span>
<span class="w">          </span><span class="o">&gt;&gt;=</span><span class="w"> </span><span class="n">loadAndApplyTemplate</span><span class="w"> </span><span class="s">&quot;templates/default.html&quot;</span><span class="w"> </span><span class="n">defaultContext</span>
<span class="w">          </span><span class="o">&gt;&gt;=</span><span class="w"> </span><span class="n">relativizeUrls</span>
<span class="w">  </span><span class="c1">-- …</span>
</pre></div>

<p></p>
For a full working example, see <a href="https://github.com/slotThe/slotThe.github.io/blob/main/site.hs#L87">my configuration</a>.
<h1 id="conclusion">Conclusion</h1>
<p></p>
That’s it! To my eyes, syntax highlighting looks much better now, and
on the way I—and perhaps you as well—even learned a little bit about how
pandoc internally represents its documents. Time well spent. As I said
in the beginning, in principle one could swap out <code>pygmentize</code> for any
other syntax highlighter that can produce HTML. However, for me these
results are good enough that I will probably not try out every tool
under the sun, chasing that ever present epsilon of highlighting cases
which I still don’t agree with—at least for now.
    </section>
</article>
]]></summary>
</entry>

</feed>
